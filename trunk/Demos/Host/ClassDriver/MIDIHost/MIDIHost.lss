
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000191a  000019ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000191a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001d2  008001d2  00001a80  2**0
                  ALLOC
  3 .comment      00000023  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000298  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004c82  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000200b  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000049b9  00000000  00000000  00008a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000007bc  00000000  00000000  0000d3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001e6c  00000000  00000000  0000db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000315e  00000000  00000000  0000f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000338  00000000  00000000  00012b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c7       	rjmp	.+3614   	; 0xe48 <__vector_10>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ce c0       	rjmp	.+412    	; 0x1da <__bad_interrupt>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	ba c0       	rjmp	.+372    	; 0x1da <__bad_interrupt>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a6 c0       	rjmp	.+332    	; 0x1da <__bad_interrupt>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.0>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.1>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.2>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.3>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.5>:
     147:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     157:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     167:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     177:	0d 0a 00                                            ...

0000017a <__c.6>:
     17a:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     18a:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     19a:	33 37 6d 00                                         37m.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d0 e2       	ldi	r29, 0x20	; 32
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1

000001ac <.Loc.1>:
     1ac:	a0 e0       	ldi	r26, 0x00	; 0

000001ae <.Loc.2>:
     1ae:	b1 e0       	ldi	r27, 0x01	; 1

000001b0 <.Loc.3>:
     1b0:	ea e1       	ldi	r30, 0x1A	; 26

000001b2 <.Loc.4>:
     1b2:	f9 e1       	ldi	r31, 0x19	; 25

000001b4 <.Loc.5>:
     1b4:	00 e0       	ldi	r16, 0x00	; 0

000001b6 <.Loc.6>:
     1b6:	0b bf       	out	0x3b, r16	; 59

000001b8 <.Loc.7>:
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <.L__do_copy_data_start>

000001ba <.L__do_copy_data_loop>:
     1ba:	07 90       	elpm	r0, Z+

000001bc <.Loc.9>:
     1bc:	0d 92       	st	X+, r0

000001be <.L__do_copy_data_start>:
     1be:	a2 3d       	cpi	r26, 0xD2	; 210

000001c0 <.Loc.11>:
     1c0:	b1 07       	cpc	r27, r17

000001c2 <.Loc.12>:
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <.L__do_copy_data_loop>

000001c4 <__do_clear_bss>:
     1c4:	21 e0       	ldi	r18, 0x01	; 1

000001c6 <.Loc.1>:
     1c6:	a2 ed       	ldi	r26, 0xD2	; 210

000001c8 <.Loc.2>:
     1c8:	b1 e0       	ldi	r27, 0x01	; 1

000001ca <.Loc.3>:
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.Loc.5>

000001cc <.Loc.4>:
     1cc:	1d 92       	st	X+, r1

000001ce <.Loc.5>:
     1ce:	a6 3e       	cpi	r26, 0xE6	; 230

000001d0 <.Loc.6>:
     1d0:	b2 07       	cpc	r27, r18

000001d2 <.Loc.7>:
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.Loc.4>

000001d4 <L0^A>:
     1d4:	b6 d0       	rcall	.+364    	; 0x342 <main>
     1d6:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1dc:	9b b1       	in	r25, 0x0b	; 11
     1de:	9f 70       	andi	r25, 0x0F	; 15
     1e0:	89 2b       	or	r24, r25

000001e2 <.LVL1>:
     1e2:	8b b9       	out	0x0b, r24	; 11

000001e4 <.Loc.4>:
			}
     1e4:	08 95       	ret

000001e6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1e6:	84 b7       	in	r24, 0x34	; 52
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	84 bf       	out	0x34, r24	; 52

000001ec <.LBB27>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	a8 95       	wdr
     1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1f6:	88 61       	ori	r24, 0x18	; 24
     1f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     200:	0f be       	out	0x3f, r0	; 63

00000202 <.LBB29>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     202:	80 e8       	ldi	r24, 0x80	; 128
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     20e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     212:	0f be       	out	0x3f, r0	; 63

00000214 <.LBB31>:
			 *  \param[in] BaudRate     Serial baud rate, in bits per second
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate
			 */
			static inline void Serial_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     214:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

00000218 <.Loc.24>:
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     218:	88 e1       	ldi	r24, 0x18	; 24
     21a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

0000021e <.Loc.26>:
				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

00000224 <.Loc.28>:
				
				DDRD  |= (1 << 3);	
     224:	53 9a       	sbi	0x0a, 3	; 10

00000226 <.Loc.30>:
				PORTD |= (1 << 2);
     226:	5a 9a       	sbi	0x0b, 2	; 11

00000228 <.Loc.32>:
				
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     228:	83 e3       	ldi	r24, 0x33	; 51
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     230:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

00000234 <.LBE33>:
			 */
			static inline void SerialStream_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);
				
				stdout = &USARTStream;
     234:	e0 ee       	ldi	r30, 0xE0	; 224
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	89 e0       	ldi	r24, 0x09	; 9
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	93 83       	std	Z+3, r25	; 0x03
     23e:	82 83       	std	Z+2, r24	; 0x02

00000240 <.Loc.37>:
				stdin  = &USARTStream;
     240:	91 83       	std	Z+1, r25	; 0x01
     242:	80 83       	st	Z, r24

00000244 <.LBB35>:
				DDRD  |=  LEDS_ALL_LEDS;
     244:	8a b1       	in	r24, 0x0a	; 10

00000246 <.Loc.43>:
     246:	80 6f       	ori	r24, 0xF0	; 240
     248:	8a b9       	out	0x0a, r24	; 10

0000024a <.Loc.44>:
				PORTD &= ~LEDS_ALL_LEDS;
     24a:	8b b1       	in	r24, 0x0b	; 11
     24c:	8f 70       	andi	r24, 0x0F	; 15
     24e:	8b b9       	out	0x0b, r24	; 11

00000250 <.LBB37>:
	
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     250:	6a 98       	cbi	0x0d, 2	; 13

00000252 <.Loc.50>:
				PORTE |=  BUTTONS_BUTTON1;
     252:	72 9a       	sbi	0x0e, 2	; 14

00000254 <.LBB39>:
			
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     254:	84 b1       	in	r24, 0x04	; 4
     256:	8f 71       	andi	r24, 0x1F	; 31
     258:	84 b9       	out	0x04, r24	; 4

0000025a <.Loc.56>:
				DDRE  &= ~(JOY_EMASK);
     25a:	8d b1       	in	r24, 0x0d	; 13
     25c:	8f 7c       	andi	r24, 0xCF	; 207
     25e:	8d b9       	out	0x0d, r24	; 13

00000260 <.Loc.58>:

				PORTB |= JOY_BMASK;
     260:	85 b1       	in	r24, 0x05	; 5

00000262 <.Loc.59>:
     262:	80 6e       	ori	r24, 0xE0	; 224
     264:	85 b9       	out	0x05, r24	; 5

00000266 <.Loc.60>:
				PORTE |= JOY_EMASK;				
     266:	8e b1       	in	r24, 0x0e	; 14

00000268 <.Loc.61>:
     268:	80 63       	ori	r24, 0x30	; 48
     26a:	8e b9       	out	0x0e, r24	; 14

0000026c <.LBE39>:
	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     26c:	73 c4       	rjmp	.+2278   	; 0xb54 <USB_Init>

0000026e <CheckJoystickMovement>:
}

void CheckJoystickMovement(void)
{
     26e:	1f 93       	push	r17

00000270 <.LCFI0>:
     270:	cf 93       	push	r28

00000272 <.LCFI1>:
     272:	df 93       	push	r29

00000274 <.LCFI2>:
     274:	00 d0       	rcall	.+0      	; 0x276 <L0^A>

00000276 <L0^A>:
     276:	00 d0       	rcall	.+0      	; 0x278 <L0^A>

00000278 <L0^A>:
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62

0000027c <.LBB46>:
			}
			
			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     27c:	83 b1       	in	r24, 0x03	; 3

0000027e <.Loc.71>:
     27e:	1c b1       	in	r17, 0x0c	; 12

00000280 <.Loc.72>:
     280:	10 95       	com	r17

00000282 <.Loc.73>:
     282:	16 95       	lsr	r17
     284:	18 71       	andi	r17, 0x18	; 24

00000286 <.Loc.74>:
     286:	80 95       	com	r24

00000288 <.Loc.75>:
     288:	80 7e       	andi	r24, 0xE0	; 224

0000028a <.Loc.76>:
     28a:	18 2b       	or	r17, r24

0000028c <.LBE46>:
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;
	
	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     28c:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <PrevJoystickStatus.4>
     290:	31 27       	eor	r19, r17

00000292 <.LBB48>:
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     292:	2c b1       	in	r18, 0x0c	; 12
     294:	20 95       	com	r18
     296:	24 70       	andi	r18, 0x04	; 4

00000298 <.LBE48>:
		
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     298:	21 11       	cpse	r18, r1
     29a:	29 e0       	ldi	r18, 0x09	; 9

0000029c <.LVL10>:

	if (JoystickChanges & JOY_LEFT)
     29c:	83 2f       	mov	r24, r19
     29e:	80 74       	andi	r24, 0x40	; 64

000002a0 <.Loc.86>:
     2a0:	88 23       	and	r24, r24
     2a2:	19 f0       	breq	.+6      	; 0x2aa <.L5>

000002a4 <.Loc.87>:
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	16 fd       	sbrc	r17, 6
     2a8:	80 e9       	ldi	r24, 0x90	; 144

000002aa <.L5>:
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
     2aa:	9c e3       	ldi	r25, 0x3C	; 60

000002ac <.Loc.90>:
     2ac:	37 ff       	sbrs	r19, 7
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <.L6>

000002b0 <.Loc.91>:
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
     2b0:	9d e3       	ldi	r25, 0x3D	; 61

000002b2 <.Loc.93>:
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2b2:	80 e8       	ldi	r24, 0x80	; 128

000002b4 <.LVL12>:
     2b4:	17 fd       	sbrc	r17, 7
     2b6:	80 e9       	ldi	r24, 0x90	; 144

000002b8 <.L6>:
	}

	if (JoystickChanges & JOY_RIGHT)
     2b8:	53 2f       	mov	r21, r19
     2ba:	50 71       	andi	r21, 0x10	; 16
     2bc:	43 2f       	mov	r20, r19
     2be:	40 72       	andi	r20, 0x20	; 32

000002c0 <.Loc.96>:
     2c0:	33 ff       	sbrs	r19, 3
     2c2:	24 c0       	rjmp	.+72     	; 0x30c <.L7>

000002c4 <.Loc.97>:
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2c4:	13 fd       	sbrc	r17, 3
     2c6:	09 c0       	rjmp	.+18     	; 0x2da <.L8>

000002c8 <.LVL14>:
		MIDIPitch   = 0x3E;
	}
	
	if (JoystickChanges & JOY_DOWN)
     2c8:	51 11       	cpse	r21, r1
     2ca:	22 c0       	rjmp	.+68     	; 0x310 <.L9>

000002cc <.Loc.101>:
		MIDIPitch   = 0x3E;
     2cc:	9e e3       	ldi	r25, 0x3E	; 62

000002ce <.Loc.103>:
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
     2ce:	44 23       	and	r20, r20
     2d0:	21 f1       	breq	.+72     	; 0x31a <.L19>

000002d2 <.L10>:
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3B;
     2d2:	9b e3       	ldi	r25, 0x3B	; 59

000002d4 <.Loc.106>:
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2d4:	15 ff       	sbrs	r17, 5
     2d6:	21 c0       	rjmp	.+66     	; 0x31a <.L19>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <.L29>

000002da <.L8>:
	if (JoystickChanges & JOY_DOWN)
     2da:	51 11       	cpse	r21, r1
     2dc:	19 c0       	rjmp	.+50     	; 0x310 <.L9>

000002de <.Loc.109>:
		MIDIPitch   = 0x3E;
     2de:	9e e3       	ldi	r25, 0x3E	; 62

000002e0 <.Loc.111>:
	if (JoystickChanges & JOY_PRESS)
     2e0:	41 11       	cpse	r20, r1
     2e2:	f7 cf       	rjmp	.-18     	; 0x2d2 <.L10>

000002e4 <.L29>:
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2e4:	80 e9       	ldi	r24, 0x90	; 144

000002e6 <.L11>:
	if (MIDICommand)
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
			{
				.CableNumber = 0,
				.Command     = (MIDICommand >> 4),
     2e6:	38 2f       	mov	r19, r24

000002e8 <.LVL18>:
     2e8:	32 95       	swap	r19
     2ea:	3f 70       	andi	r19, 0x0F	; 15

000002ec <.Loc.116>:
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     2ec:	39 83       	std	Y+1, r19	; 0x01
     2ee:	28 2b       	or	r18, r24

000002f0 <.LVL19>:
     2f0:	2a 83       	std	Y+2, r18	; 0x02
     2f2:	9b 83       	std	Y+3, r25	; 0x03
     2f4:	80 e4       	ldi	r24, 0x40	; 64
     2f6:	8c 83       	std	Y+4, r24	; 0x04

000002f8 <.Loc.118>:
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,			
			};
			
		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     2f8:	be 01       	movw	r22, r28
     2fa:	6f 5f       	subi	r22, 0xFF	; 255
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9d d7       	rcall	.+3898   	; 0x123e <MIDI_Host_SendEventPacket>

00000304 <.LVL20>:
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	7e d7       	rcall	.+3836   	; 0x1206 <MIDI_Host_Flush>

0000030a <.LVL21>:
     30a:	11 c0       	rjmp	.+34     	; 0x32e <.L15>

0000030c <.L7>:
	if (JoystickChanges & JOY_DOWN)
     30c:	55 23       	and	r21, r21
     30e:	59 f0       	breq	.+22     	; 0x326 <.L12>

00000310 <.L9>:
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     310:	14 fd       	sbrc	r17, 4
     312:	05 c0       	rjmp	.+10     	; 0x31e <.L13>

00000314 <.LVL24>:
		MIDIPitch   = 0x3F;
     314:	9f e3       	ldi	r25, 0x3F	; 63

00000316 <.Loc.127>:
	if (JoystickChanges & JOY_PRESS)
     316:	41 11       	cpse	r20, r1
     318:	dc cf       	rjmp	.-72     	; 0x2d2 <.L10>

0000031a <.L19>:
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	e4 cf       	rjmp	.-56     	; 0x2e6 <.L11>

0000031e <.L13>:
		MIDIPitch   = 0x3F;
     31e:	9f e3       	ldi	r25, 0x3F	; 63

00000320 <.Loc.131>:
	if (JoystickChanges & JOY_PRESS)
     320:	44 23       	and	r20, r20
     322:	01 f3       	breq	.-64     	; 0x2e4 <.L29>
     324:	d6 cf       	rjmp	.-84     	; 0x2d2 <.L10>

00000326 <.L12>:
     326:	41 11       	cpse	r20, r1
     328:	d4 cf       	rjmp	.-88     	; 0x2d2 <.L10>

0000032a <.Loc.134>:
	if (MIDICommand)
     32a:	81 11       	cpse	r24, r1
     32c:	dc cf       	rjmp	.-72     	; 0x2e6 <.L11>

0000032e <.L15>:
	}

	PrevJoystickStatus = JoystickStatus;
     32e:	10 93 d2 01 	sts	0x01D2, r17	; 0x8001d2 <PrevJoystickStatus.4>

00000332 <.Loc.138>:
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17

00000340 <.LVL29>:
     340:	08 95       	ret

00000342 <main>:
{
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62

00000346 <.LCFI5>:
     346:	c2 50       	subi	r28, 0x02	; 2
     348:	d2 40       	sbci	r29, 0x02	; 2

0000034a <.LCFI6>:
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61

00000354 <.Loc.141>:
	SetupHardware();
     354:	48 df       	rcall	.-368    	; 0x1e6 <SetupHardware>

00000356 <.LBB51>:
	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     356:	8a e7       	ldi	r24, 0x7A	; 122
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 c8 09 	call	0x1390	; 0x1390 <puts_P>

0000035e <.LVL31>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     35e:	80 e1       	ldi	r24, 0x10	; 16
     360:	3d df       	rcall	.-390    	; 0x1dc <LEDs_SetAllLEDs>

00000362 <.LBB52>:
				USB_HostState = HOST_STATE_Configured;
     362:	8c e0       	ldi	r24, 0x0C	; 12
     364:	b8 2e       	mov	r11, r24

00000366 <.LBB53>:
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     366:	07 e4       	ldi	r16, 0x47	; 71
     368:	11 e0       	ldi	r17, 0x01	; 1
     36a:	93 e3       	ldi	r25, 0x33	; 51
     36c:	e9 2e       	mov	r14, r25
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	f9 2e       	mov	r15, r25
     372:	20 e3       	ldi	r18, 0x30	; 48
     374:	c2 2e       	mov	r12, r18
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	d2 2e       	mov	r13, r18

0000037a <.L40>:
		switch (USB_HostState)
     37a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_HostState>
     37e:	8b 30       	cpi	r24, 0x0B	; 11
     380:	21 f0       	breq	.+8      	; 0x38a <.L31>
     382:	8c 30       	cpi	r24, 0x0C	; 12
     384:	b1 f1       	breq	.+108    	; 0x3f2 <.L32>

00000386 <.L33>:
		USB_USBTask();
     386:	e5 d5       	rcall	.+3018   	; 0xf52 <USB_USBTask>

00000388 <.LVL34>:
		switch (USB_HostState)
     388:	f8 cf       	rjmp	.-16     	; 0x37a <.L40>

0000038a <.L31>:
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     38a:	80 ea       	ldi	r24, 0xA0	; 160
     38c:	27 df       	rcall	.-434    	; 0x1dc <LEDs_SetAllLEDs>

0000038e <.LVL36>:
				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	32 e0       	ldi	r19, 0x02	; 2
     392:	ae 01       	movw	r20, r28
     394:	4f 5f       	subi	r20, 0xFF	; 255
     396:	5f 4f       	sbci	r21, 0xFF	; 255
     398:	be 01       	movw	r22, r28
     39a:	6f 5f       	subi	r22, 0xFF	; 255
     39c:	7d 4f       	sbci	r23, 0xFD	; 253
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	e6 d5       	rcall	.+3020   	; 0xf6e <USB_Host_GetDeviceConfigDescriptor>

000003a2 <.LVL37>:
     3a2:	88 23       	and	r24, r24
     3a4:	41 f0       	breq	.+16     	; 0x3b6 <.L34>

000003a6 <.Loc.161>:
					printf("Error Retrieving Configuration Descriptor.\r\n");
     3a6:	87 e3       	ldi	r24, 0x37	; 55
     3a8:	91 e0       	ldi	r25, 0x01	; 1

000003aa <.L44>:
					printf("Attached Device Not a Valid MIDI Class Device.\r\n");
     3aa:	c6 d7       	rcall	.+3980   	; 0x1338 <puts>

000003ac <.LVL38>:
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3ac:	80 e9       	ldi	r24, 0x90	; 144
     3ae:	16 df       	rcall	.-468    	; 0x1dc <LEDs_SetAllLEDs>

000003b0 <.LVL39>:
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     3b0:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <USB_HostState>

000003b4 <.Loc.166>:
					break;
     3b4:	e8 cf       	rjmp	.-48     	; 0x386 <.L33>

000003b6 <.L34>:
				if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     3b6:	cf 5f       	subi	r28, 0xFF	; 255
     3b8:	dd 4f       	sbci	r29, 0xFD	; 253
     3ba:	68 81       	ld	r22, Y
     3bc:	79 81       	ldd	r23, Y+1	; 0x01
     3be:	c1 50       	subi	r28, 0x01	; 1
     3c0:	d2 40       	sbci	r29, 0x02	; 2
     3c2:	ae 01       	movw	r20, r28
     3c4:	4f 5f       	subi	r20, 0xFF	; 255
     3c6:	5f 4f       	sbci	r21, 0xFF	; 255
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	87 d6       	rcall	.+3342   	; 0x10dc <MIDI_Host_ConfigurePipes>

000003ce <.LVL40>:
     3ce:	88 23       	and	r24, r24
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <.L36>

000003d2 <.Loc.170>:
					printf("Attached Device Not a Valid MIDI Class Device.\r\n");
     3d2:	83 e6       	ldi	r24, 0x63	; 99
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <.L44>

000003d8 <.L36>:
				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	38 d2       	rcall	.+1136   	; 0x84c <USB_Host_SetDeviceConfiguration>

000003dc <.LVL41>:
     3dc:	88 23       	and	r24, r24
     3de:	19 f0       	breq	.+6      	; 0x3e6 <.L37>

000003e0 <.Loc.174>:
					printf("Error Setting Device Configuration.\r\n");
     3e0:	83 e9       	ldi	r24, 0x93	; 147
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	e2 cf       	rjmp	.-60     	; 0x3aa <.L44>

000003e6 <.L37>:
				printf("MIDI Device Enumerated.\r\n");
     3e6:	88 eb       	ldi	r24, 0xB8	; 184
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	a6 d7       	rcall	.+3916   	; 0x1338 <puts>

000003ec <.LVL42>:
				USB_HostState = HOST_STATE_Configured;
     3ec:	b0 92 d6 01 	sts	0x01D6, r11	; 0x8001d6 <USB_HostState>

000003f0 <.Loc.178>:
				break;
     3f0:	ca cf       	rjmp	.-108    	; 0x386 <.L33>

000003f2 <.L32>:
				CheckJoystickMovement();
     3f2:	3d df       	rcall	.-390    	; 0x26e <CheckJoystickMovement>

000003f4 <.LVL43>:
				if (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     3f4:	be 01       	movw	r22, r28
     3f6:	6f 5f       	subi	r22, 0xFF	; 255
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	47 d7       	rcall	.+3726   	; 0x128e <MIDI_Host_ReceiveEventPacket>

00000400 <.LVL44>:
     400:	88 23       	and	r24, r24
     402:	09 f4       	brne	.+2      	; 0x406 <.LBB55>

00000404 <L0^A>:
     404:	c0 cf       	rjmp	.-128    	; 0x386 <.L33>

00000406 <.LBB55>:
					bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8f 70       	andi	r24, 0x0F	; 15
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0

0000040e <.LVL45>:
					if (NoteOnEvent || NoteOffEvent)
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	d1 f4       	brne	.+52     	; 0x446 <.L38>

00000412 <.Loc.189>:
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     412:	4c 81       	ldd	r20, Y+4	; 0x04
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	2b 81       	ldd	r18, Y+3	; 0x03

00000418 <.LVL46>:
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	8f 70       	andi	r24, 0x0F	; 15
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	b6 01       	movw	r22, r12

00000424 <.L39>:
     424:	5f 93       	push	r21
     426:	4f 93       	push	r20
     428:	3f 93       	push	r19
     42a:	2f 93       	push	r18
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	7f 93       	push	r23
     432:	6f 93       	push	r22
     434:	1f 93       	push	r17
     436:	0f 93       	push	r16
     438:	59 d7       	rcall	.+3762   	; 0x12ec <printf_P>

0000043a <.LVL47>:
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	a0 cf       	rjmp	.-192    	; 0x386 <.L33>

00000446 <.L38>:
					if (NoteOnEvent || NoteOffEvent)
     446:	28 30       	cpi	r18, 0x08	; 8
     448:	31 05       	cpc	r19, r1
     44a:	09 f0       	breq	.+2      	; 0x44e <.Loc.195>

0000044c <L0^A>:
     44c:	9c cf       	rjmp	.-200    	; 0x386 <.L33>

0000044e <.Loc.195>:
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     44e:	4c 81       	ldd	r20, Y+4	; 0x04
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	2b 81       	ldd	r18, Y+3	; 0x03

00000454 <.LVL49>:
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	b7 01       	movw	r22, r14
     460:	e1 cf       	rjmp	.-62     	; 0x424 <.L39>

00000462 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     462:	84 e3       	ldi	r24, 0x34	; 52
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	94 d7       	rcall	.+3880   	; 0x1390 <puts_P>

00000468 <.LVL50>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     468:	80 ea       	ldi	r24, 0xA0	; 160
     46a:	b8 ce       	rjmp	.-656    	; 0x1dc <LEDs_SetAllLEDs>

0000046c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     46c:	8d e1       	ldi	r24, 0x1D	; 29
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	8f d7       	rcall	.+3870   	; 0x1390 <puts_P>

00000472 <.LVL52>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	b3 ce       	rjmp	.-666    	; 0x1dc <LEDs_SetAllLEDs>

00000476 <EVENT_USB_Host_DeviceEnumerationComplete>:
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     476:	80 e6       	ldi	r24, 0x60	; 96
     478:	b1 ce       	rjmp	.-670    	; 0x1dc <LEDs_SetAllLEDs>

0000047a <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     47a:	c8 2f       	mov	r28, r24

0000047c <.Loc.213>:
	USB_ShutDown();
     47c:	7e d3       	rcall	.+1788   	; 0xb7a <USB_ShutDown>

0000047e <.LBB59>:

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     47e:	1f 92       	push	r1

00000480 <.LCFI7>:
     480:	cf 93       	push	r28

00000482 <.LCFI8>:
     482:	8e ee       	ldi	r24, 0xEE	; 238
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9f 93       	push	r25

00000488 <.LCFI9>:
     488:	8f 93       	push	r24

0000048a <.LCFI10>:
     48a:	30 d7       	rcall	.+3680   	; 0x12ec <printf_P>

0000048c <.LVL57>:
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	a6 de       	rcall	.-692    	; 0x1dc <LEDs_SetAllLEDs>

00000490 <.LVL58>:
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0

00000498 <.L49>:
	for(;;);
     498:	ff cf       	rjmp	.-2      	; 0x498 <.L49>

0000049a <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     49a:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <USB_HostState>

0000049e <.LBB60>:
     49e:	1f 92       	push	r1

000004a0 <.LCFI12>:
     4a0:	9f 93       	push	r25

000004a2 <.LCFI13>:
     4a2:	1f 92       	push	r1

000004a4 <.LCFI14>:
     4a4:	6f 93       	push	r22

000004a6 <.LCFI15>:
     4a6:	1f 92       	push	r1

000004a8 <.LCFI16>:
     4a8:	8f 93       	push	r24

000004aa <.LCFI17>:
     4aa:	88 e9       	ldi	r24, 0x98	; 152
     4ac:	90 e0       	ldi	r25, 0x00	; 0

000004ae <.LVL60>:
     4ae:	9f 93       	push	r25

000004b0 <.LCFI18>:
     4b0:	8f 93       	push	r24

000004b2 <.LCFI19>:
     4b2:	1c d7       	rcall	.+3640   	; 0x12ec <printf_P>

000004b4 <.LVL61>:
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);
	
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b4:	8d b7       	in	r24, 0x3d	; 61
     4b6:	9e b7       	in	r25, 0x3e	; 62
     4b8:	08 96       	adiw	r24, 0x08	; 8
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	9e bf       	out	0x3e, r25	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	8d bf       	out	0x3d, r24	; 61

000004c4 <.LCFI20>:
     4c4:	80 e9       	ldi	r24, 0x90	; 144
     4c6:	8a ce       	rjmp	.-748    	; 0x1dc <LEDs_SetAllLEDs>

000004c8 <SerialStream_TxByte>:
			 *
			 *  \param[in] DataByte  Byte to transmit through the USART
			 */
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     4c8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

000004cc <.Loc.3>:
     4cc:	95 ff       	sbrs	r25, 5
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <SerialStream_TxByte>

000004d0 <.Loc.4>:
				UDR1 = DataByte;
     4d0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000004d4 <.LBE4>:
{
	(void)Stream;
	
	Serial_TxByte(DataByte);
	return 0;
}
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0

000004d8 <.LVL1>:
     4d8:	08 95       	ret

000004da <SerialStream_RxByte>:

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;
	
	if (!(Serial_IsCharReceived()))
     4da:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

000004de <.LVL3>:
     4de:	87 ff       	sbrs	r24, 7
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <.L8>

000004e2 <.L7>:
			 *
			 *  \return Byte received from the USART
			 */
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
     4e2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

000004e6 <.Loc.16>:
     4e6:	87 ff       	sbrs	r24, 7
     4e8:	fc cf       	rjmp	.-8      	; 0x4e2 <.L7>

000004ea <.Loc.17>:
				return UDR1; 
     4ea:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000004ee <.LBE8>:
	  return _FDEV_EOF;

	return Serial_RxByte();
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	08 95       	ret

000004f2 <.L8>:
	  return _FDEV_EOF;
     4f2:	8e ef       	ldi	r24, 0xFE	; 254
     4f4:	9f ef       	ldi	r25, 0xFF	; 255

000004f6 <.Loc.21>:
}
     4f6:	08 95       	ret

000004f8 <USB_Host_ResetDevice>:
	return ErrorCode;
}

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();
     4f8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4fc:	81 70       	andi	r24, 0x01	; 1

000004fe <.LVL0>:

	USB_INT_Disable(USB_INT_DDISCI);
     4fe:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     502:	9d 7f       	andi	r25, 0xFD	; 253
     504:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000508 <.Loc.5>:
	
	USB_Host_ResetBus();
     508:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     50c:	92 60       	ori	r25, 0x02	; 2
     50e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

00000512 <.L2>:
	while (!(USB_Host_IsBusResetComplete()));
     512:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

00000516 <.Loc.12>:
     516:	91 fd       	sbrc	r25, 1
     518:	fc cf       	rjmp	.-8      	; 0x512 <.L2>

0000051a <.Loc.13>:

	USB_Host_ResumeBus();
     51a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     51e:	91 60       	ori	r25, 0x01	; 1
     520:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

00000524 <.Loc.15>:

	USB_INT_Clear(USB_INT_HSOFI);
     524:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     528:	9f 7d       	andi	r25, 0xDF	; 223
     52a:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

0000052e <.LBB18>:
     52e:	9a e0       	ldi	r25, 0x0A	; 10

00000530 <.L5>:
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     530:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000534 <.Loc.25>:
     534:	25 ff       	sbrs	r18, 5
     536:	17 c0       	rjmp	.+46     	; 0x566 <.L3>

00000538 <.Loc.26>:
		{
			USB_INT_Clear(USB_INT_HSOFI);
     538:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

0000053c <.LVL3>:
     53c:	9f 7d       	andi	r25, 0xDF	; 223
     53e:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000542 <.Loc.29>:
			USB_INT_Clear(USB_INT_DDISCI);
     542:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     546:	9d 7f       	andi	r25, 0xFD	; 253
     548:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

0000054c <.L4>:
		}
		
		_delay_ms(1);
	}

	if (BusSuspended)
     54c:	81 11       	cpse	r24, r1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <.L6>

00000550 <.Loc.37>:
	  USB_Host_SuspendBus();
     550:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

00000554 <.LVL5>:
     554:	8e 7f       	andi	r24, 0xFE	; 254
     556:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

0000055a <.L6>:

	USB_INT_Enable(USB_INT_DDISCI);
     55a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     55e:	82 60       	ori	r24, 0x02	; 2
     560:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000564 <.Loc.43>:
}
     564:	08 95       	ret

00000566 <.L3>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	ef ec       	ldi	r30, 0xCF	; 207
     568:	f7 e0       	ldi	r31, 0x07	; 7

0000056a <.L1^B1>:
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <.L1^B1>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <L0^A>

00000570 <L0^A>:
     570:	00 00       	nop

00000572 <.LBE19>:
	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     572:	91 50       	subi	r25, 0x01	; 1

00000574 <.LVL8>:
     574:	91 11       	cpse	r25, r1
     576:	dc cf       	rjmp	.-72     	; 0x530 <.L5>
     578:	e9 cf       	rjmp	.-46     	; 0x54c <.L4>

0000057a <USB_Host_WaitMS>:
	bool    BusSuspended = USB_Host_IsBusSuspended();
     57a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     57e:	91 70       	andi	r25, 0x01	; 1

00000580 <.LVL10>:
	USB_Host_ResumeBus();
     580:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     584:	21 60       	ori	r18, 0x01	; 1
     586:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

0000058a <.L10>:
	while (MS)
     58a:	88 23       	and	r24, r24
     58c:	c1 f0       	breq	.+48     	; 0x5be <.L12>

0000058e <.Loc.66>:
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     58e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000592 <.Loc.68>:
     592:	25 ff       	sbrs	r18, 5
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <.L11>

00000596 <.Loc.69>:
			USB_INT_Clear(USB_INT_HSOFI);
     596:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     59a:	2f 7d       	andi	r18, 0xDF	; 223
     59c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

000005a0 <.Loc.71>:
			MS--;
     5a0:	81 50       	subi	r24, 0x01	; 1

000005a2 <.L11>:
		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode == USB_MODE_DEVICE))
     5a2:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <USB_HostState>

000005a6 <.Loc.76>:
     5a6:	22 30       	cpi	r18, 0x02	; 2
     5a8:	e9 f0       	breq	.+58     	; 0x5e4 <.L16>

000005aa <.Loc.77>:
		if (Pipe_IsError() == true)
     5aa:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005ae <.Loc.79>:
     5ae:	24 ff       	sbrs	r18, 4
     5b0:	0e c0       	rjmp	.+28     	; 0x5ce <.L13>

000005b2 <.Loc.80>:
			Pipe_ClearError();
     5b2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005b6 <.LVL12>:
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005bc <.LVL13>:
			ErrorCode = HOST_WAITERROR_PipeError;
     5bc:	82 e0       	ldi	r24, 0x02	; 2

000005be <.L12>:
	if (BusSuspended)
     5be:	91 11       	cpse	r25, r1
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <.L9>

000005c2 <.Loc.89>:
	  USB_Host_SuspendBus();
     5c2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

000005c6 <.LVL15>:
     5c6:	9e 7f       	andi	r25, 0xFE	; 254
     5c8:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

000005cc <.L9>:
}
     5cc:	08 95       	ret

000005ce <.L13>:
		if (Pipe_IsStalled() == true)
     5ce:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005d2 <.Loc.97>:
     5d2:	21 ff       	sbrs	r18, 1
     5d4:	da cf       	rjmp	.-76     	; 0x58a <.L10>

000005d6 <.Loc.98>:
			Pipe_ClearStall();
     5d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005da <.LVL17>:
     5da:	8d 7f       	andi	r24, 0xFD	; 253
     5dc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000005e0 <.LVL18>:
			ErrorCode = HOST_WAITERROR_SetupStalled;
     5e0:	83 e0       	ldi	r24, 0x03	; 3

000005e2 <.Loc.105>:
			break;			
     5e2:	ed cf       	rjmp	.-38     	; 0x5be <.L12>

000005e4 <.L16>:
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     5e4:	81 e0       	ldi	r24, 0x01	; 1

000005e6 <.LVL20>:
     5e6:	eb cf       	rjmp	.-42     	; 0x5be <.L12>

000005e8 <USB_Host_ProcessNextHostState>:
{
     5e8:	ef 92       	push	r14

000005ea <.LCFI0>:
     5ea:	ff 92       	push	r15

000005ec <.LCFI1>:
     5ec:	0f 93       	push	r16

000005ee <.LCFI2>:
     5ee:	1f 93       	push	r17

000005f0 <.LCFI3>:
     5f0:	cf 93       	push	r28

000005f2 <.LCFI4>:
     5f2:	df 93       	push	r29

000005f4 <.LCFI5>:
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62

000005f8 <.LCFI6>:
     5f8:	28 97       	sbiw	r28, 0x08	; 8

000005fa <.LCFI7>:
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61

00000604 <.LVL21>:
	switch (USB_HostState)
     604:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <USB_HostState>

00000608 <.LVL22>:
     608:	ef ef       	ldi	r30, 0xFF	; 255
     60a:	e1 0f       	add	r30, r17
     60c:	ea 30       	cpi	r30, 0x0A	; 10
     60e:	c0 f5       	brcc	.+112    	; 0x680 <.L22>
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	ed 57       	subi	r30, 0x7D	; 125
     614:	f3 4f       	sbci	r31, 0xF3	; 243
     616:	61 c6       	rjmp	.+3266   	; 0x12da <__tablejump2__>

00000618 <.L33>:
			if (WaitMSRemaining)
     618:	e0 90 d4 01 	lds	r14, 0x01D4	; 0x8001d4 <WaitMSRemaining.1>
     61c:	f0 90 d5 01 	lds	r15, 0x01D5	; 0x8001d5 <WaitMSRemaining.1+0x1>

00000620 <.Loc.117>:
     620:	e1 14       	cp	r14, r1
     622:	f1 04       	cpc	r15, r1
     624:	69 f1       	breq	.+90     	; 0x680 <.L22>

00000626 <.Loc.118>:
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	a8 df       	rcall	.-176    	; 0x57a <USB_Host_WaitMS>

0000062a <.LVL23>:
     62a:	68 2f       	mov	r22, r24

0000062c <.LVL24>:
     62c:	88 23       	and	r24, r24
     62e:	e9 f0       	breq	.+58     	; 0x66a <.L35>

00000630 <.Loc.121>:
					USB_HostState = PostWaitState;
     630:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <PostWaitState.0>
     634:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000638 <.L36>:
	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     638:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_HostState>

0000063c <.Loc.128>:
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	01 f1       	breq	.+64     	; 0x680 <.L22>

00000640 <.Loc.129>:
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     640:	81 2f       	mov	r24, r17
     642:	2b df       	rcall	.-426    	; 0x49a <EVENT_USB_Host_DeviceEnumerationFailed>

00000644 <.LVL26>:
		USB_Host_VBUS_Auto_Off();
     644:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

0000064e <.Loc.132>:
		EVENT_USB_Host_DeviceUnattached();
     64e:	0e df       	rcall	.-484    	; 0x46c <EVENT_USB_Host_DeviceUnattached>

00000650 <.LVL27>:
}
     650:	28 96       	adiw	r28, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14

00000668 <.Loc.136>:
		USB_ResetInterface();
     668:	2a c2       	rjmp	.+1108   	; 0xabe <USB_ResetInterface>

0000066a <.L35>:
				if (!(--WaitMSRemaining))
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	e8 1a       	sub	r14, r24
     66e:	f1 08       	sbc	r15, r1

00000670 <.Loc.139>:
     670:	f0 92 d5 01 	sts	0x01D5, r15	; 0x8001d5 <WaitMSRemaining.1+0x1>
     674:	e0 92 d4 01 	sts	0x01D4, r14	; 0x8001d4 <WaitMSRemaining.1>

00000678 <.Loc.140>:
				  USB_HostState = PostWaitState;
     678:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <PostWaitState.0>

0000067c <.Loc.141>:
				if (!(--WaitMSRemaining))
     67c:	ef 28       	or	r14, r15
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <.L48>

00000680 <.L22>:
}
     680:	28 96       	adiw	r28, 0x08	; 8
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <.L32>:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     69a:	8c ed       	ldi	r24, 0xDC	; 220
     69c:	95 e0       	ldi	r25, 0x05	; 5
     69e:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <WaitMSRemaining.1+0x1>
     6a2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <WaitMSRemaining.1>

000006a6 <.Loc.146>:
			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6a6:	84 e0       	ldi	r24, 0x04	; 4

000006a8 <.L48>:
     6a8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

000006ac <.LBE27>:
	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     6ac:	e9 cf       	rjmp	.-46     	; 0x680 <.L22>

000006ae <.L31>:
			if (WaitMSRemaining--)
     6ae:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <WaitMSRemaining.1>
     6b2:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <WaitMSRemaining.1+0x1>
     6b6:	9c 01       	movw	r18, r24
     6b8:	21 50       	subi	r18, 0x01	; 1
     6ba:	31 09       	sbc	r19, r1
     6bc:	30 93 d5 01 	sts	0x01D5, r19	; 0x8001d5 <WaitMSRemaining.1+0x1>
     6c0:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <WaitMSRemaining.1>

000006c4 <.Loc.154>:
     6c4:	89 2b       	or	r24, r25
     6c6:	39 f0       	breq	.+14     	; 0x6d6 <.L38>

000006c8 <.LBB24>:
     6c8:	8f ec       	ldi	r24, 0xCF	; 207
     6ca:	97 e0       	ldi	r25, 0x07	; 7

000006cc <.L1^B2>:
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <.L1^B2>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <L0^A>

000006d2 <L0^A>:
     6d2:	00 00       	nop

000006d4 <.LBE24>:
	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     6d4:	d5 cf       	rjmp	.-86     	; 0x680 <.L22>

000006d6 <.L38>:
				USB_Host_VBUS_Manual_Off();
     6d6:	77 98       	cbi	0x0e, 7	; 14

000006d8 <.Loc.167>:
				USB_OTGPAD_On();
     6d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6dc:	80 61       	ori	r24, 0x10	; 16
     6de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

000006e2 <.Loc.170>:
				USB_Host_VBUS_Auto_Enable();
     6e2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6e6:	8b 7f       	andi	r24, 0xFB	; 251
     6e8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

000006ec <.Loc.173>:
     6ec:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     6f0:	80 61       	ori	r24, 0x10	; 16
     6f2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>

000006f6 <.Loc.174>:
				USB_Host_VBUS_Auto_On();
     6f6:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

00000700 <.Loc.177>:
				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     700:	85 e0       	ldi	r24, 0x05	; 5
     702:	d2 cf       	rjmp	.-92     	; 0x6a8 <.L48>

00000704 <.L30>:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     704:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000708 <.Loc.182>:
     708:	80 ff       	sbrs	r24, 0
     70a:	ba cf       	rjmp	.-140    	; 0x680 <.L22>

0000070c <.Loc.183>:
				USB_INT_Clear(USB_INT_DCONNI);
     70c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     710:	8e 7f       	andi	r24, 0xFE	; 254
     712:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000716 <.Loc.185>:
				USB_INT_Clear(USB_INT_DDISCI);
     716:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000720 <.Loc.188>:
				USB_INT_Clear(USB_INT_VBERRI);
     720:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     724:	8d 7f       	andi	r24, 0xFD	; 253
     726:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

0000072a <.Loc.191>:
				USB_INT_Enable(USB_INT_VBERRI);
     72a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000734 <.Loc.194>:
				USB_Host_ResumeBus();
     734:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

0000073e <.Loc.197>:
				Pipe_ClearPipes();
     73e:	6b d2       	rcall	.+1238   	; 0xc16 <Pipe_ClearPipes>

00000740 <.LVL37>:
				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000746 <.Loc.201>:
     746:	84 e6       	ldi	r24, 0x64	; 100
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <WaitMSRemaining.1+0x1>
     74e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <WaitMSRemaining.1>

00000752 <.Loc.202>:
     752:	86 e0       	ldi	r24, 0x06	; 6

00000754 <.L49>:
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     754:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <PostWaitState.0>

00000758 <.LBE29>:
	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     758:	93 cf       	rjmp	.-218    	; 0x680 <.L22>

0000075a <.L29>:
			USB_Host_ResetDevice();
     75a:	ce de       	rcall	.-612    	; 0x4f8 <USB_Host_ResetDevice>

0000075c <.LVL41>:
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000762 <.Loc.211>:
     762:	88 ec       	ldi	r24, 0xC8	; 200
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <WaitMSRemaining.1+0x1>
     76a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <WaitMSRemaining.1>

0000076e <.Loc.212>:
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	f1 cf       	rjmp	.-30     	; 0x754 <.L49>

00000772 <.L28>:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     772:	e1 2c       	mov	r14, r1
     774:	00 e4       	ldi	r16, 0x40	; 64
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e d2       	rcall	.+1052   	; 0xb9e <Pipe_ConfigurePipe>

00000782 <.LVL42>:
			if (!(Pipe_IsConfigured()))
     782:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

00000786 <.Loc.216>:
     786:	87 ff       	sbrs	r24, 7
     788:	5c c0       	rjmp	.+184    	; 0x842 <.L39>

0000078a <.Loc.217>:
			USB_HostState = HOST_STATE_Default;
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	8d cf       	rjmp	.-230    	; 0x6a8 <.L48>

0000078e <.L27>:
			USB_ControlRequest = (USB_Request_Header_t)
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	e8 e1       	ldi	r30, 0x18	; 24
     792:	f1 e0       	ldi	r31, 0x01	; 1
     794:	a7 ed       	ldi	r26, 0xD7	; 215
     796:	b1 e0       	ldi	r27, 0x01	; 1

00000798 <.L0^B1>:
     798:	01 90       	ld	r0, Z+
     79a:	0d 92       	st	X+, r0
     79c:	8a 95       	dec	r24
     79e:	e1 f7       	brne	.-8      	; 0x798 <.L0^B1>

000007a0 <.Loc.221>:
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	87 d0       	rcall	.+270    	; 0x8b4 <USB_Host_SendControlRequest>

000007a6 <.LVL43>:
     7a6:	68 2f       	mov	r22, r24

000007a8 <.LVL44>:
     7a8:	81 11       	cpse	r24, r1
     7aa:	4e c0       	rjmp	.+156    	; 0x848 <.L41>

000007ac <.Loc.225>:
			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7ac:	88 85       	ldd	r24, Y+8	; 0x08
     7ae:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_ControlPipeSize>

000007b2 <.Loc.227>:
			USB_Host_ResetDevice();
     7b2:	a2 de       	rcall	.-700    	; 0x4f8 <USB_Host_ResetDevice>

000007b4 <.LVL45>:
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

000007ba <.Loc.230>:
     7ba:	88 ec       	ldi	r24, 0xC8	; 200
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <WaitMSRemaining.1+0x1>
     7c2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <WaitMSRemaining.1>

000007c6 <.Loc.231>:
     7c6:	89 e0       	ldi	r24, 0x09	; 9
     7c8:	c5 cf       	rjmp	.-118    	; 0x754 <.L49>

000007ca <.L26>:
			Pipe_DisablePipe();
     7ca:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     7ce:	8e 7f       	andi	r24, 0xFE	; 254
     7d0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

000007d4 <.Loc.234>:
			Pipe_DeallocateMemory();		
     7d4:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     7d8:	8d 7f       	andi	r24, 0xFD	; 253
     7da:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>

000007de <.Loc.237>:
			Pipe_ResetPipe(PIPE_CONTROLPIPE);
     7de:	ff 24       	eor	r15, r15
     7e0:	f3 94       	inc	r15
     7e2:	f0 92 a8 00 	sts	0x00A8, r15	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

000007e6 <.Loc.240>:
     7e6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

000007ea <.Loc.241>:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7ea:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <USB_ControlPipeSize>
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	e1 2c       	mov	r14, r1
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	d1 d1       	rcall	.+930    	; 0xb9e <Pipe_ConfigurePipe>

000007fc <.LVL47>:
			if (!(Pipe_IsConfigured()))
     7fc:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

00000800 <.Loc.245>:
     800:	87 ff       	sbrs	r24, 7
     802:	1f c0       	rjmp	.+62     	; 0x842 <.L39>

00000804 <.Loc.246>:
			USB_ControlRequest = (USB_Request_Header_t)
     804:	88 e0       	ldi	r24, 0x08	; 8
     806:	e0 e2       	ldi	r30, 0x20	; 32
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	a7 ed       	ldi	r26, 0xD7	; 215
     80c:	b1 e0       	ldi	r27, 0x01	; 1

0000080e <.L0^B2>:
     80e:	01 90       	ld	r0, Z+
     810:	0d 92       	st	X+, r0
     812:	8a 95       	dec	r24
     814:	e1 f7       	brne	.-8      	; 0x80e <.L0^B2>

00000816 <.Loc.248>:
			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	4c d0       	rcall	.+152    	; 0x8b4 <USB_Host_SendControlRequest>

0000081c <.LVL48>:
     81c:	68 2f       	mov	r22, r24

0000081e <.LVL49>:
     81e:	81 11       	cpse	r24, r1
     820:	13 c0       	rjmp	.+38     	; 0x848 <.L41>

00000822 <.Loc.251>:
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     822:	f0 92 d6 01 	sts	0x01D6, r15	; 0x8001d6 <USB_HostState>

00000826 <.Loc.253>:
     826:	84 e6       	ldi	r24, 0x64	; 100
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <WaitMSRemaining.1+0x1>
     82e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <WaitMSRemaining.1>

00000832 <.Loc.254>:
     832:	8a e0       	ldi	r24, 0x0A	; 10
     834:	8f cf       	rjmp	.-226    	; 0x754 <.L49>

00000836 <.L24>:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>

0000083c <.Loc.257>:
			EVENT_USB_Host_DeviceEnumerationComplete();
     83c:	1c de       	rcall	.-968    	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete>

0000083e <.LVL51>:
			USB_HostState = HOST_STATE_Addressed;
     83e:	8b e0       	ldi	r24, 0x0B	; 11
     840:	33 cf       	rjmp	.-410    	; 0x6a8 <.L48>

00000842 <.L39>:
				SubErrorCode = 0;
     842:	60 e0       	ldi	r22, 0x00	; 0

00000844 <.Loc.264>:
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     844:	14 e0       	ldi	r17, 0x04	; 4
     846:	f8 ce       	rjmp	.-528    	; 0x638 <.L36>

00000848 <.L41>:
				ErrorCode = HOST_ENUMERROR_ControlError;
     848:	13 e0       	ldi	r17, 0x03	; 3
     84a:	f6 ce       	rjmp	.-532    	; 0x638 <.L36>

0000084c <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     84c:	e7 ed       	ldi	r30, 0xD7	; 215
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	10 82       	st	Z, r1
     852:	99 e0       	ldi	r25, 0x09	; 9
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	93 83       	std	Z+3, r25	; 0x03
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	15 82       	std	Z+5, r1	; 0x05
     85e:	14 82       	std	Z+4, r1	; 0x04
     860:	17 82       	std	Z+7, r1	; 0x07
     862:	16 82       	std	Z+6, r1	; 0x06

00000864 <.Loc.269>:
			.wValue        = ConfigNumber,
			.wIndex        = 0,
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
     864:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000868 <.Loc.271>:
	
	return USB_Host_SendControlRequest(NULL);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0

0000086c <.LVL55>:
     86c:	23 c0       	rjmp	.+70     	; 0x8b4 <USB_Host_SendControlRequest>

0000086e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     86e:	0f 93       	push	r16

00000870 <.LCFI0>:
     870:	1f 93       	push	r17

00000872 <.LCFI1>:
     872:	cf 93       	push	r28

00000874 <.LCFI2>:
     874:	c8 2f       	mov	r28, r24

00000876 <.LVL1>:
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;	
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif
	
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     876:	09 ee       	ldi	r16, 0xE9	; 233
     878:	13 e0       	ldi	r17, 0x03	; 3

0000087a <.L2>:
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     87a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

0000087e <.Loc.7>:
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     87e:	c1 11       	cpse	r28, r1
     880:	07 c0       	rjmp	.+14     	; 0x890 <.L4>

00000882 <.Loc.8>:
     882:	83 ff       	sbrs	r24, 3
     884:	09 c0       	rjmp	.+18     	; 0x898 <.L5>

00000886 <.L17>:
			
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     886:	80 e0       	ldi	r24, 0x00	; 0

00000888 <.L1>:
}
     888:	cf 91       	pop	r28

0000088a <.LVL4>:
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	08 95       	ret

00000890 <.L4>:
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     890:	c1 30       	cpi	r28, 0x01	; 1
     892:	69 f4       	brne	.+26     	; 0x8ae <.L6>

00000894 <.Loc.13>:
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     894:	80 fd       	sbrc	r24, 0
     896:	f7 cf       	rjmp	.-18     	; 0x886 <.L17>

00000898 <.L5>:
		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	6f de       	rcall	.-802    	; 0x57a <USB_Host_WaitMS>

0000089c <.LVL6>:
     89c:	81 11       	cpse	r24, r1
     89e:	f4 cf       	rjmp	.-24     	; 0x888 <.L1>

000008a0 <.LVL7>:
		if (!(TimeoutCounter--))
     8a0:	01 50       	subi	r16, 0x01	; 1
     8a2:	11 09       	sbc	r17, r1

000008a4 <.LVL8>:
     8a4:	01 15       	cp	r16, r1
     8a6:	11 05       	cpc	r17, r1
     8a8:	41 f7       	brne	.-48     	; 0x87a <.L2>

000008aa <.Loc.21>:
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     8aa:	84 e0       	ldi	r24, 0x04	; 4

000008ac <.LVL9>:
     8ac:	ed cf       	rjmp	.-38     	; 0x888 <.L1>

000008ae <.L6>:
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     8ae:	82 ff       	sbrs	r24, 2
     8b0:	f3 cf       	rjmp	.-26     	; 0x898 <.L5>
     8b2:	e9 cf       	rjmp	.-46     	; 0x886 <.L17>

000008b4 <USB_Host_SendControlRequest>:
{
     8b4:	ff 92       	push	r15

000008b6 <.LCFI3>:
     8b6:	0f 93       	push	r16

000008b8 <.LCFI4>:
     8b8:	1f 93       	push	r17

000008ba <.LCFI5>:
     8ba:	cf 93       	push	r28

000008bc <.LCFI6>:
     8bc:	df 93       	push	r29

000008be <.LCFI7>:
     8be:	ec 01       	movw	r28, r24

000008c0 <.LVL12>:
	bool     BusSuspended   = USB_Host_IsBusSuspended();
     8c0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

000008c4 <.LVL13>:
     8c4:	81 70       	andi	r24, 0x01	; 1
     8c6:	f8 2e       	mov	r15, r24

000008c8 <.LVL14>:
	uint16_t DataLen        = USB_ControlRequest.wLength;
     8c8:	00 91 dd 01 	lds	r16, 0x01DD	; 0x8001dd <USB_ControlRequest+0x6>
     8cc:	10 91 de 01 	lds	r17, 0x01DE	; 0x8001de <USB_ControlRequest+0x7>

000008d0 <.LVL15>:
	USB_Host_ResumeBus();
     8d0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8d4:	81 60       	ori	r24, 0x01	; 1
     8d6:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

000008da <.Loc.37>:
	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	4e de       	rcall	.-868    	; 0x57a <USB_Host_WaitMS>

000008de <.LVL16>:
     8de:	81 11       	cpse	r24, r1
     8e0:	54 c0       	rjmp	.+168    	; 0x98a <.L19>

000008e2 <.Loc.41>:
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
     8e2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

000008e6 <.LVL17>:
     8e6:	8f 7c       	andi	r24, 0xCF	; 207
     8e8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

000008ec <.Loc.44>:
	Pipe_ClearErrorFlags();
     8ec:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

000008f0 <.Loc.47>:
	Pipe_Unfreeze();
     8f0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8f4:	8f 7b       	andi	r24, 0xBF	; 191
     8f6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

000008fa <.LBB15>:
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
     8fa:	87 ed       	ldi	r24, 0xD7	; 215
     8fc:	91 e0       	ldi	r25, 0x01	; 1

000008fe <.L20>:
	  Pipe_Write_Byte(*(HeaderStream++));
     8fe:	fc 01       	movw	r30, r24

00000900 <.Loc.56>:
     900:	01 96       	adiw	r24, 0x01	; 1

00000902 <.Loc.57>:
     902:	20 81       	ld	r18, Z

00000904 <.LBB16>:
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     904:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>

00000908 <.LBE16>:
	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	8f 3d       	cpi	r24, 0xDF	; 223
     90c:	92 07       	cpc	r25, r18
     90e:	b9 f7       	brne	.-18     	; 0x8fe <.L20>

00000910 <.LBB19>:
	Pipe_ClearSETUP();
     910:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000914 <.LVL23>:
     914:	98 2f       	mov	r25, r24
     916:	97 7f       	andi	r25, 0xF7	; 247
     918:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

0000091c <.Loc.67>:
     91c:	8f 77       	andi	r24, 0x7F	; 127

0000091e <.LVL24>:
     91e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000922 <.LBE19>:
	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	a4 df       	rcall	.-184    	; 0x86e <USB_Host_WaitForIOS>

00000926 <.LVL25>:
     926:	81 11       	cpse	r24, r1
     928:	30 c0       	rjmp	.+96     	; 0x98a <.L19>

0000092a <.Loc.73>:
	Pipe_Freeze();
     92a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

0000092e <.LVL26>:
     92e:	80 64       	ori	r24, 0x40	; 64
     930:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000934 <.Loc.76>:
	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	21 de       	rcall	.-958    	; 0x57a <USB_Host_WaitMS>

00000938 <.LVL27>:
     938:	81 11       	cpse	r24, r1
     93a:	27 c0       	rjmp	.+78     	; 0x98a <.L19>

0000093c <.Loc.80>:
	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     93c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <USB_ControlRequest>

00000940 <.LVL28>:
     940:	87 ff       	sbrs	r24, 7
     942:	6c c0       	rjmp	.+216    	; 0xa1c <.L21>

00000944 <.Loc.83>:
		Pipe_SetPipeToken(PIPE_TOKEN_IN);
     944:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     948:	8f 7c       	andi	r24, 0xCF	; 207
     94a:	80 61       	ori	r24, 0x10	; 16
     94c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000950 <.Loc.85>:
		if (DataStream != NULL)
     950:	20 97       	sbiw	r28, 0x00	; 0
     952:	09 f0       	breq	.+2      	; 0x956 <.L30>

00000954 <L0^A>:
     954:	4d c0       	rjmp	.+154    	; 0x9f0 <.L22>

00000956 <.L30>:
		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
     956:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     95a:	8f 7c       	andi	r24, 0xCF	; 207
     95c:	80 62       	ori	r24, 0x20	; 32
     95e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000962 <.Loc.90>:
		Pipe_Unfreeze();
     962:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     966:	8f 7b       	andi	r24, 0xBF	; 191
     968:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

0000096c <.Loc.93>:
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	7f df       	rcall	.-258    	; 0x86e <USB_Host_WaitForIOS>

00000970 <.LVL30>:
     970:	81 11       	cpse	r24, r1
     972:	0b c0       	rjmp	.+22     	; 0x98a <.L19>

00000974 <.LBB20>:
		Pipe_ClearOUT();
     974:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000978 <.LVL31>:
     978:	98 2f       	mov	r25, r24
     97a:	9b 7f       	andi	r25, 0xFB	; 251
     97c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000980 <.Loc.100>:
     980:	8f 77       	andi	r24, 0x7F	; 127

00000982 <.LVL32>:
     982:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000986 <.LBE20>:
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	72 df       	rcall	.-284    	; 0x86e <USB_Host_WaitForIOS>

0000098a <.L19>:
	Pipe_Freeze();
     98a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     98e:	90 64       	ori	r25, 0x40	; 64
     990:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000994 <.Loc.108>:
	if (BusSuspended)
     994:	f1 10       	cpse	r15, r1
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <.L38>

00000998 <.Loc.111>:
	  USB_Host_SuspendBus();
     998:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     99c:	9e 7f       	andi	r25, 0xFE	; 254
     99e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

000009a2 <.L38>:
	Pipe_ResetPipe(PIPE_CONTROLPIPE);
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

000009a8 <.Loc.116>:
     9a8:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

000009ac <.Loc.117>:
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28

000009b0 <.LVL34>:
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16

000009b4 <.LVL35>:
     9b4:	ff 90       	pop	r15

000009b6 <.LVL36>:
     9b6:	08 95       	ret

000009b8 <.L28>:
				return UPDATX;
     9b8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>

000009bc <.LBE21>:
					*(DataStream++) = Pipe_Read_Byte();
     9bc:	89 93       	st	Y+, r24

000009be <.LVL38>:
					DataLen--;
     9be:	01 50       	subi	r16, 0x01	; 1
     9c0:	11 09       	sbc	r17, r1

000009c2 <.L26>:
				while (Pipe_BytesInPipe() && DataLen)
     9c2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     9c6:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

000009ca <.Loc.132>:
     9ca:	89 2b       	or	r24, r25
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <.L27>

000009ce <.Loc.133>:
     9ce:	01 15       	cp	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	91 f7       	brne	.-28     	; 0x9b8 <.L28>

000009d4 <.L27>:
				Pipe_Freeze();
     9d4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9d8:	80 64       	ori	r24, 0x40	; 64
     9da:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

000009de <.LBB23>:
				Pipe_ClearIN();
     9de:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000009e2 <.LVL40>:
     9e2:	98 2f       	mov	r25, r24
     9e4:	9e 7f       	andi	r25, 0xFE	; 254
     9e6:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000009ea <.Loc.140>:
     9ea:	8f 77       	andi	r24, 0x7F	; 127

000009ec <.LVL41>:
     9ec:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000009f0 <.L22>:
			while (DataLen)
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <.Loc.145>

000009f6 <L0^A>:
     9f6:	af cf       	rjmp	.-162    	; 0x956 <.L30>

000009f8 <.Loc.145>:
				Pipe_Unfreeze();
     9f8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9fc:	8f 7b       	andi	r24, 0xBF	; 191
     9fe:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000a02 <.Loc.147>:
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	34 df       	rcall	.-408    	; 0x86e <USB_Host_WaitForIOS>

00000a06 <.LVL43>:
     a06:	81 11       	cpse	r24, r1
     a08:	c0 cf       	rjmp	.-128    	; 0x98a <.L19>

00000a0a <.Loc.151>:
				if (!(Pipe_BytesInPipe()))
     a0a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     a0e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

00000a12 <.LVL44>:
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	09 f0       	breq	.+2      	; 0xa18 <.L24>
     a16:	c8 01       	movw	r24, r16

00000a18 <.L24>:
     a18:	8c 01       	movw	r16, r24
     a1a:	d3 cf       	rjmp	.-90     	; 0x9c2 <.L26>

00000a1c <.L21>:
		if (DataStream != NULL)
     a1c:	20 97       	sbiw	r28, 0x00	; 0
     a1e:	b9 f0       	breq	.+46     	; 0xa4e <.L31>

00000a20 <.Loc.157>:
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
     a20:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a24:	8f 7c       	andi	r24, 0xCF	; 207
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000a2c <.Loc.159>:
			Pipe_Unfreeze();	
     a2c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a30:	8f 7b       	andi	r24, 0xBF	; 191
     a32:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000a36 <.L32>:
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     a36:	82 e0       	ldi	r24, 0x02	; 2

00000a38 <.Loc.167>:
			while (DataLen)
     a38:	01 15       	cp	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	09 f5       	brne	.+66     	; 0xa80 <.L36>

00000a3e <.Loc.168>:
			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     a3e:	17 df       	rcall	.-466    	; 0x86e <USB_Host_WaitForIOS>

00000a40 <.LVL48>:
     a40:	81 11       	cpse	r24, r1
     a42:	a3 cf       	rjmp	.-186    	; 0x98a <.L19>

00000a44 <.Loc.171>:
			Pipe_Freeze();
     a44:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000a48 <.LVL49>:
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000a4e <.L31>:
		Pipe_SetPipeToken(PIPE_TOKEN_IN);
     a4e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a52:	8f 7c       	andi	r24, 0xCF	; 207
     a54:	80 61       	ori	r24, 0x10	; 16
     a56:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000a5a <.Loc.177>:
		Pipe_Unfreeze();
     a5a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a5e:	8f 7b       	andi	r24, 0xBF	; 191
     a60:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000a64 <.Loc.180>:
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	03 df       	rcall	.-506    	; 0x86e <USB_Host_WaitForIOS>

00000a68 <.LVL51>:
     a68:	81 11       	cpse	r24, r1
     a6a:	8f cf       	rjmp	.-226    	; 0x98a <.L19>

00000a6c <.LBB24>:
		Pipe_ClearIN();
     a6c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000a70 <.LVL52>:
     a70:	29 2f       	mov	r18, r25
     a72:	2e 7f       	andi	r18, 0xFE	; 254
     a74:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000a78 <.Loc.187>:
     a78:	9f 77       	andi	r25, 0x7F	; 127

00000a7a <.LVL53>:
     a7a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a7e:	85 cf       	rjmp	.-246    	; 0x98a <.L19>

00000a80 <.L36>:
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     a80:	f6 de       	rcall	.-532    	; 0x86e <USB_Host_WaitForIOS>

00000a82 <.LVL55>:
     a82:	81 11       	cpse	r24, r1
     a84:	82 cf       	rjmp	.-252    	; 0x98a <.L19>

00000a86 <.L33>:
				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     a86:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     a8a:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

00000a8e <.Loc.194>:
     a8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlPipeSize>
     a92:	90 e0       	ldi	r25, 0x00	; 0

00000a94 <.Loc.195>:
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	40 f4       	brcc	.+16     	; 0xaaa <.L34>

00000a9a <.LVL57>:
					Pipe_Write_Byte(*(DataStream++));
     a9a:	89 91       	ld	r24, Y+

00000a9c <.LBB25>:
				UPDATX = Byte;
     a9c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>

00000aa0 <.LBE25>:
					DataLen--;
     aa0:	01 50       	subi	r16, 0x01	; 1
     aa2:	11 09       	sbc	r17, r1

00000aa4 <.Loc.204>:
				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     aa4:	01 15       	cp	r16, r1
     aa6:	11 05       	cpc	r17, r1
     aa8:	71 f7       	brne	.-36     	; 0xa86 <.L33>

00000aaa <.L34>:
				Pipe_ClearOUT();
     aaa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000aae <.LVL61>:
     aae:	98 2f       	mov	r25, r24
     ab0:	9b 7f       	andi	r25, 0xFB	; 251
     ab2:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000ab6 <.Loc.208>:
     ab6:	8f 77       	andi	r24, 0x7F	; 127

00000ab8 <.LVL62>:
     ab8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     abc:	bc cf       	rjmp	.-136    	; 0xa36 <.L32>

00000abe <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     abe:	b3 d1       	rcall	.+870    	; 0xe26 <USB_INT_DisableAllInterrupts>

00000ac0 <.LVL0>:
	USB_INT_ClearAllInterrupts();
     ac0:	bc d1       	rcall	.+888    	; 0xe3a <USB_INT_ClearAllInterrupts>

00000ac2 <.LVL1>:
	
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000ac8 <.Loc.5>:
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
     ac8:	8c e0       	ldi	r24, 0x0C	; 12
     aca:	89 bd       	out	0x29, r24	; 41

00000acc <.Loc.8>:
     acc:	89 b5       	in	r24, 0x29	; 41
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	89 bd       	out	0x29, r24	; 41

00000ad2 <.L2>:
		while (!(USB_PLL_IsReady()));
     ad2:	09 b4       	in	r0, 0x29	; 41
     ad4:	00 fe       	sbrs	r0, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <.L2>

00000ad8 <.LBB2>:
	}
	
	USB_Controller_Reset();
     ad8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000adc <.LVL2>:
     adc:	98 2f       	mov	r25, r24
     ade:	9f 77       	andi	r25, 0x7F	; 127
     ae0:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000ae4 <.Loc.15>:
     ae4:	80 68       	ori	r24, 0x80	; 128

00000ae6 <.LVL3>:
     ae6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000aea <.LBE2>:
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     aea:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>

00000af4 <.Loc.21>:
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
     af4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     af8:	8f 7d       	andi	r24, 0xDF	; 223
     afa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000afe <.Loc.25>:
			#endif
		}
	}
	#endif

	USB_Attach();
     afe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     b02:	8e 7f       	andi	r24, 0xFE	; 254
     b04:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

00000b08 <.Loc.28>:

		#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
		USB_INT_Enable(USB_INT_VBUS);
		#endif
	#elif defined(USB_HOST_ONLY)
	USB_Host_HostMode_On();
     b08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b0c:	80 64       	ori	r24, 0x40	; 64
     b0e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000b12 <.Loc.31>:
	
	USB_Host_VBUS_Auto_Off();
     b12:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

00000b1c <.Loc.34>:
	USB_OTGPAD_Off();
     b1c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b20:	8f 7e       	andi	r24, 0xEF	; 239
     b22:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00000b26 <.Loc.37>:

	USB_Host_VBUS_Manual_Enable();
     b26:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b2a:	84 60       	ori	r24, 0x04	; 4
     b2c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

00000b30 <.Loc.40>:
     b30:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b34:	8f 7e       	andi	r24, 0xEF	; 239
     b36:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>

00000b3a <.Loc.41>:
     b3a:	6f 9a       	sbi	0x0d, 7	; 13

00000b3c <.Loc.42>:
	USB_Host_VBUS_Manual_On();
     b3c:	77 9a       	sbi	0x0e, 7	; 14

00000b3e <.Loc.45>:
	
	USB_INT_Enable(USB_INT_SRPI);
     b3e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000b48 <.Loc.48>:
	USB_INT_Enable(USB_INT_BCERRI);
     b48:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b4c:	84 60       	ori	r24, 0x04	; 4
     b4e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000b52 <.Loc.51>:
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     b52:	08 95       	ret

00000b54 <USB_Init>:
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_ControlPipeSize>

00000b5a <.Loc.56>:
	UHWCON &= ~(1 << UIMOD);
     b5a:	e7 ed       	ldi	r30, 0xD7	; 215
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8f 77       	andi	r24, 0x7F	; 127
     b62:	80 83       	st	Z, r24

00000b64 <.Loc.58>:
	USB_ResetInterface();
     b64:	ac df       	rcall	.-168    	; 0xabe <USB_ResetInterface>

00000b66 <.LVL4>:
	USB_OTGPAD_On();
     b66:	e8 ed       	ldi	r30, 0xD8	; 216
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 61       	ori	r24, 0x10	; 16
     b6e:	80 83       	st	Z, r24

00000b70 <.Loc.61>:
	USB_IsInitialized = true;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <USB_IsInitialized>

00000b76 <.Loc.64>:
	sei();
     b76:	78 94       	sei

00000b78 <.Loc.65>:
}
     b78:	08 95       	ret

00000b7a <USB_ShutDown>:
	USB_ResetInterface();
     b7a:	a1 df       	rcall	.-190    	; 0xabe <USB_ResetInterface>

00000b7c <.LVL5>:
	USB_Detach();
     b7c:	e0 ee       	ldi	r30, 0xE0	; 224
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 83       	st	Z, r24

00000b86 <.Loc.70>:
	USB_Controller_Disable();
     b86:	e8 ed       	ldi	r30, 0xD8	; 216
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	80 83       	st	Z, r24

00000b90 <.Loc.73>:
	  USB_PLL_Off();
     b90:	19 bc       	out	0x29, r1	; 41

00000b92 <.Loc.77>:
	USB_OTGPAD_Off();
     b92:	80 81       	ld	r24, Z
     b94:	8f 7e       	andi	r24, 0xEF	; 239
     b96:	80 83       	st	Z, r24

00000b98 <.Loc.80>:
	USB_IsInitialized = false;
     b98:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <USB_IsInitialized>

00000b9c <.Loc.83>:
}
     b9c:	08 95       	ret

00000b9e <Pipe_ConfigurePipe>:

uint8_t USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipe(const uint8_t Number, const uint8_t Type, const uint8_t Token, const uint8_t EndpointNumber,
						const uint16_t Size, const uint8_t Banks)
{
     b9e:	ef 92       	push	r14

00000ba0 <.LCFI0>:
     ba0:	0f 93       	push	r16

00000ba2 <.LCFI1>:
     ba2:	1f 93       	push	r17

00000ba4 <.LCFI2>:
	Pipe_SelectPipe(Number);
     ba4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000ba8 <.Loc.4>:
	Pipe_EnablePipe();
     ba8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000bac <.LVL1>:
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000bb2 <.LVL2>:

	UPCFG1X = 0;
     bb2:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>

00000bb6 <.Loc.11>:
	
	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     bb6:	2f 70       	andi	r18, 0x0F	; 15

00000bb8 <.LVL3>:
     bb8:	42 2b       	or	r20, r18

00000bba <.LVL4>:
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	68 9f       	mul	r22, r24
     bbe:	b0 01       	movw	r22, r0
     bc0:	11 24       	eor	r1, r1

00000bc2 <.LVL5>:
     bc2:	46 2b       	or	r20, r22

00000bc4 <.Loc.16>:
     bc4:	40 93 aa 00 	sts	0x00AA, r20	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000bc8 <.LBB39>:
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(uint16_t Bytes)
			{
				if (Bytes <= 8)
				  return (0 << EPSIZE0);
     bc8:	80 e0       	ldi	r24, 0x00	; 0

00000bca <.Loc.21>:
				if (Bytes <= 8)
     bca:	09 30       	cpi	r16, 0x09	; 9
     bcc:	11 05       	cpc	r17, r1
     bce:	88 f0       	brcs	.+34     	; 0xbf2 <.L2>

00000bd0 <.Loc.22>:
				else if (Bytes <= 16)
				  return (1 << EPSIZE0);
     bd0:	80 e1       	ldi	r24, 0x10	; 16

00000bd2 <.Loc.24>:
				else if (Bytes <= 16)
     bd2:	01 31       	cpi	r16, 0x11	; 17
     bd4:	11 05       	cpc	r17, r1
     bd6:	68 f0       	brcs	.+26     	; 0xbf2 <.L2>

00000bd8 <.Loc.25>:
				else if (Bytes <= 32)
				  return (2 << EPSIZE0);
     bd8:	80 e2       	ldi	r24, 0x20	; 32

00000bda <.Loc.27>:
				else if (Bytes <= 32)
     bda:	01 32       	cpi	r16, 0x21	; 33
     bdc:	11 05       	cpc	r17, r1
     bde:	48 f0       	brcs	.+18     	; 0xbf2 <.L2>

00000be0 <.Loc.28>:
				else if (Bytes <= 64)
				  return (3 << EPSIZE0);
     be0:	80 e3       	ldi	r24, 0x30	; 48

00000be2 <.Loc.30>:
				else if (Bytes <= 64)
     be2:	01 34       	cpi	r16, 0x41	; 65
     be4:	11 05       	cpc	r17, r1
     be6:	28 f0       	brcs	.+10     	; 0xbf2 <.L2>

00000be8 <.Loc.31>:
				else if (Bytes <= 128)
				  return (4 << EPSIZE0);
     be8:	80 e4       	ldi	r24, 0x40	; 64

00000bea <.Loc.33>:
				else if (Bytes <= 128)
     bea:	01 38       	cpi	r16, 0x81	; 129
     bec:	11 05       	cpc	r17, r1
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <.L2>

00000bf0 <.Loc.34>:
				else
				  return (5 << EPSIZE0);
     bf0:	80 e5       	ldi	r24, 0x50	; 80

00000bf2 <.L2>:
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bf2:	8e 29       	or	r24, r14
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>

00000bfa <.Loc.37>:

	Pipe_SetInfiniteINRequests();
     bfa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bfe:	80 62       	ori	r24, 0x20	; 32
     c00:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000c04 <.Loc.39>:

	return Pipe_IsConfigured();
     c04:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

00000c08 <.Loc.42>:
}
     c08:	88 1f       	adc	r24, r24
     c0a:	88 27       	eor	r24, r24
     c0c:	88 1f       	adc	r24, r24
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16

00000c12 <.LVL8>:
     c12:	ef 90       	pop	r14

00000c14 <.LVL9>:
     c14:	08 95       	ret

00000c16 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c16:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

00000c1a <.LBB41>:
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0

00000c1e <.LBB42>:

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_ResetPipe(PNum);
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	50 e0       	ldi	r21, 0x00	; 0

00000c22 <.L9>:
     c22:	9a 01       	movw	r18, r20
     c24:	08 2e       	mov	r0, r24
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <.L2^B1>

00000c28 <.L1^B1>:
     c28:	22 0f       	add	r18, r18

00000c2a <.L2^B1>:
     c2a:	0a 94       	dec	r0
     c2c:	ea f7       	brpl	.-6      	; 0xc28 <.L1^B1>
     c2e:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

00000c32 <.Loc.55>:
     c32:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

00000c36 <.Loc.56>:
		Pipe_SelectPipe(PNum);
     c36:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000c3a <.Loc.59>:
		UPIENX = 0;
     c3a:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

00000c3e <.Loc.62>:
		UPINTX = 0;
     c3e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000c42 <.Loc.64>:
		Pipe_ClearError();
     c42:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c46:	2f 7e       	andi	r18, 0xEF	; 239
     c48:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000c4c <.Loc.66>:
		Pipe_ClearErrorFlags();
     c4c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

00000c50 <.Loc.69>:
		Pipe_DeallocateMemory();
     c50:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     c54:	2d 7f       	andi	r18, 0xFD	; 253
     c56:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>

00000c5a <.Loc.72>:
		Pipe_DisablePipe();
     c5a:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c5e:	2e 7f       	andi	r18, 0xFE	; 254
     c60:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

00000c64 <.LVL12>:
	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c64:	01 96       	adiw	r24, 0x01	; 1

00000c66 <.LVL13>:
     c66:	87 30       	cpi	r24, 0x07	; 7
     c68:	91 05       	cpc	r25, r1
     c6a:	d9 f6       	brne	.-74     	; 0xc22 <.L9>

00000c6c <.LBE42>:
	}
}
     c6c:	08 95       	ret

00000c6e <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();
     c6e:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000c72 <.Loc.83>:
     c72:	57 70       	andi	r21, 0x07	; 7

00000c74 <.LBB43>:

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c74:	60 e1       	ldi	r22, 0x10	; 16
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	87 fd       	sbrc	r24, 7
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <.L13>
     c7c:	60 e2       	ldi	r22, 0x20	; 32
     c7e:	70 e0       	ldi	r23, 0x00	; 0

00000c80 <.L13>:
     c80:	40 e0       	ldi	r20, 0x00	; 0

00000c82 <.L18>:
	{
		Pipe_SelectPipe(PNum);
     c82:	40 93 a7 00 	sts	0x00A7, r20	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000c86 <.Loc.90>:
		
		uint8_t PipeToken = Pipe_GetPipeToken();
     c86:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000c8a <.Loc.93>:
     c8a:	20 73       	andi	r18, 0x30	; 48

00000c8c <.LVL17>:
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
		
		if (Pipe_IsConfigured() && PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     c8c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

00000c90 <.Loc.97>:
		if (PipeToken != PIPE_TOKEN_SETUP)
     c90:	21 11       	cpse	r18, r1
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <.L14>

00000c94 <.Loc.98>:
		if (Pipe_IsConfigured() && PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     c94:	97 ff       	sbrs	r25, 7
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <.L16>

00000c98 <.L15>:
     c98:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000c9c <.Loc.101>:
     c9c:	98 27       	eor	r25, r24

00000c9e <.Loc.102>:
     c9e:	9f 70       	andi	r25, 0x0F	; 15
     ca0:	91 11       	cpse	r25, r1
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <.L16>

00000ca4 <.Loc.103>:
		  return true;
     ca4:	81 e0       	ldi	r24, 0x01	; 1

00000ca6 <.LBE43>:
	}
	
	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ca6:	08 95       	ret

00000ca8 <.L14>:
		if (Pipe_IsConfigured() && PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     ca8:	97 ff       	sbrs	r25, 7
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <.L16>

00000cac <.Loc.109>:
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     cac:	30 e0       	ldi	r19, 0x00	; 0

00000cae <.Loc.110>:
		if (Pipe_IsConfigured() && PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     cae:	26 17       	cp	r18, r22
     cb0:	37 07       	cpc	r19, r23
     cb2:	91 f3       	breq	.-28     	; 0xc98 <.L15>

00000cb4 <.L16>:
	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cb4:	4f 5f       	subi	r20, 0xFF	; 255

00000cb6 <.Loc.113>:
     cb6:	47 30       	cpi	r20, 0x07	; 7
     cb8:	21 f7       	brne	.-56     	; 0xc82 <.L18>

00000cba <.LBE46>:
	Pipe_SelectPipe(PrevPipeNumber);
     cba:	50 93 a7 00 	sts	0x00A7, r21	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000cbe <.Loc.116>:
	return false;
     cbe:	80 e0       	ldi	r24, 0x00	; 0

00000cc0 <.LVL23>:
     cc0:	08 95       	ret

00000cc2 <Pipe_WaitUntilReady>:

uint8_t Pipe_WaitUntilReady(void)
{
     cc2:	95 e6       	ldi	r25, 0x65	; 101

00000cc4 <.L25>:
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif
	
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     cc4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000cc8 <.Loc.126>:
     cc8:	80 73       	andi	r24, 0x30	; 48
     cca:	80 31       	cpi	r24, 0x10	; 16
     ccc:	31 f4       	brne	.+12     	; 0xcda <.L22>

00000cce <.Loc.127>:
		{
			if (Pipe_IsINReceived())
     cce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000cd2 <.Loc.129>:
     cd2:	80 ff       	sbrs	r24, 0
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <.L24>

00000cd6 <.L28>:
			  return PIPE_READYWAIT_NoError;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret

00000cda <.L22>:
		}
		else
		{
			if (Pipe_IsOUTReady())
     cda:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000cde <.Loc.133>:
     cde:	82 fd       	sbrc	r24, 2
     ce0:	fa cf       	rjmp	.-12     	; 0xcd6 <.L28>

00000ce2 <.L24>:
			  return PIPE_READYWAIT_NoError;		
		}

		if (Pipe_IsStalled())
     ce2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000ce6 <.Loc.136>:
     ce6:	81 fd       	sbrc	r24, 1
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <.L29>

00000cea <.Loc.137>:
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     cea:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_HostState>

00000cee <.Loc.139>:
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	79 f0       	breq	.+30     	; 0xd10 <.L21>

00000cf2 <.Loc.140>:
		  return PIPE_READYWAIT_DeviceDisconnected;
			  
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     cf2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000cf6 <.Loc.142>:
     cf6:	85 ff       	sbrs	r24, 5
     cf8:	e5 cf       	rjmp	.-54     	; 0xcc4 <.L25>

00000cfa <.Loc.143>:
		{
			USB_INT_Clear(USB_INT_HSOFI);
     cfa:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cfe:	8f 7d       	andi	r24, 0xDF	; 223
     d00:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000d04 <.LVL26>:

			if (!(TimeoutMSRem--))
     d04:	91 50       	subi	r25, 0x01	; 1

00000d06 <.LVL27>:
     d06:	91 11       	cpse	r25, r1
     d08:	dd cf       	rjmp	.-70     	; 0xcc4 <.L25>

00000d0a <.Loc.149>:
			  return PIPE_READYWAIT_Timeout;
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	08 95       	ret

00000d0e <.L29>:
		  return PIPE_READYWAIT_PipeStalled;
     d0e:	81 e0       	ldi	r24, 0x01	; 1

00000d10 <.L21>:
		}
	}
}
     d10:	08 95       	ret

00000d12 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
     d12:	df 92       	push	r13

00000d14 <.LCFI8>:
     d14:	ef 92       	push	r14

00000d16 <.LCFI9>:
     d16:	ff 92       	push	r15

00000d18 <.LCFI10>:
     d18:	0f 93       	push	r16

00000d1a <.LCFI11>:
     d1a:	1f 93       	push	r17

00000d1c <.LCFI12>:
     d1c:	cf 93       	push	r28

00000d1e <.LCFI13>:
     d1e:	df 93       	push	r29

00000d20 <.LCFI14>:
     d20:	d8 2f       	mov	r29, r24
     d22:	d9 2e       	mov	r13, r25
     d24:	8b 01       	movw	r16, r22
     d26:	7a 01       	movw	r14, r20

00000d28 <.LVL43>:
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	Pipe_SetPipeToken(TEMPLATE_TOKEN);
     d28:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d2c:	2f 7c       	andi	r18, 0xCF	; 207
     d2e:	20 62       	ori	r18, 0x20	; 32
     d30:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000d34 <.Loc.196>:

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d34:	c6 df       	rcall	.-116    	; 0xcc2 <Pipe_WaitUntilReady>

00000d36 <.LVL44>:
     d36:	c8 2f       	mov	r28, r24

00000d38 <.LVL45>:
     d38:	88 23       	and	r24, r24
     d3a:	c1 f0       	breq	.+48     	; 0xd6c <.L48>

00000d3c <.L46>:
			Length--;
		}
	}
	
	return PIPE_RWSTREAM_NoError;
}
     d3c:	8c 2f       	mov	r24, r28
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14

00000d4a <.LVL47>:
     d4a:	df 90       	pop	r13
     d4c:	08 95       	ret

00000d4e <.L50>:
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     d4e:	f7 01       	movw	r30, r14
     d50:	09 95       	icall

00000d52 <.LVL49>:
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	f1 f4       	brne	.+60     	; 0xd92 <.L52>

00000d56 <.Loc.205>:
			  return PIPE_RWSTREAM_CallbackAborted;
     d56:	c4 e0       	ldi	r28, 0x04	; 4
     d58:	f1 cf       	rjmp	.-30     	; 0xd3c <.L46>

00000d5a <.L49>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d5a:	ed 2f       	mov	r30, r29
     d5c:	fd 2d       	mov	r31, r13

00000d5e <.LVL51>:
     d5e:	81 91       	ld	r24, Z+

00000d60 <.LBB50>:
				UPDATX = Byte;
     d60:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>

00000d64 <.LBE50>:
			Length--;
     d64:	01 50       	subi	r16, 0x01	; 1
     d66:	11 09       	sbc	r17, r1

00000d68 <.LVL54>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d68:	de 2f       	mov	r29, r30
     d6a:	df 2e       	mov	r13, r31

00000d6c <.L48>:
	while (Length)
     d6c:	01 15       	cp	r16, r1
     d6e:	11 05       	cpc	r17, r1
     d70:	29 f3       	breq	.-54     	; 0xd3c <.L46>

00000d72 <.L51>:
		if (!(Pipe_IsReadWriteAllowed()))
     d72:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000d76 <.Loc.218>:
     d76:	85 fd       	sbrc	r24, 5
     d78:	f0 cf       	rjmp	.-32     	; 0xd5a <.L49>

00000d7a <.LBB52>:
			TEMPLATE_CLEAR_PIPE();
     d7a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000d7e <.LVL57>:
     d7e:	98 2f       	mov	r25, r24
     d80:	9b 7f       	andi	r25, 0xFB	; 251
     d82:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000d86 <.Loc.222>:
     d86:	8f 77       	andi	r24, 0x7F	; 127

00000d88 <.LVL58>:
     d88:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000d8c <.LBE52>:
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     d8c:	e1 14       	cp	r14, r1
     d8e:	f1 04       	cpc	r15, r1
     d90:	f1 f6       	brne	.-68     	; 0xd4e <.L50>

00000d92 <.L52>:
			if ((ErrorCode = Pipe_WaitUntilReady()))
     d92:	97 df       	rcall	.-210    	; 0xcc2 <Pipe_WaitUntilReady>

00000d94 <.LVL59>:
     d94:	88 23       	and	r24, r24
     d96:	69 f3       	breq	.-38     	; 0xd72 <.L51>
     d98:	c8 2f       	mov	r28, r24
     d9a:	d0 cf       	rjmp	.-96     	; 0xd3c <.L46>

00000d9c <Pipe_Read_Stream_LE>:
{
     d9c:	df 92       	push	r13

00000d9e <.LCFI54>:
     d9e:	ef 92       	push	r14

00000da0 <.LCFI55>:
     da0:	ff 92       	push	r15

00000da2 <.LCFI56>:
     da2:	0f 93       	push	r16

00000da4 <.LCFI57>:
     da4:	1f 93       	push	r17

00000da6 <.LCFI58>:
     da6:	cf 93       	push	r28

00000da8 <.LCFI59>:
     da8:	df 93       	push	r29

00000daa <.LCFI60>:
     daa:	d8 2f       	mov	r29, r24
     dac:	d9 2e       	mov	r13, r25
     dae:	8b 01       	movw	r16, r22
     db0:	7a 01       	movw	r14, r20

00000db2 <.LVL160>:
	Pipe_SetPipeToken(TEMPLATE_TOKEN);
     db2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     db6:	2f 7c       	andi	r18, 0xCF	; 207
     db8:	20 61       	ori	r18, 0x10	; 16
     dba:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

00000dbe <.Loc.458>:
	if ((ErrorCode = Pipe_WaitUntilReady()))
     dbe:	81 df       	rcall	.-254    	; 0xcc2 <Pipe_WaitUntilReady>

00000dc0 <.LVL161>:
     dc0:	c8 2f       	mov	r28, r24

00000dc2 <.LVL162>:
     dc2:	88 23       	and	r24, r24
     dc4:	c1 f0       	breq	.+48     	; 0xdf6 <.L108>

00000dc6 <.L106>:
}
     dc6:	8c 2f       	mov	r24, r28
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14

00000dd4 <.LVL164>:
     dd4:	df 90       	pop	r13
     dd6:	08 95       	ret

00000dd8 <.L110>:
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     dd8:	f7 01       	movw	r30, r14
     dda:	09 95       	icall

00000ddc <.LVL166>:
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	f1 f4       	brne	.+60     	; 0xe1c <.L112>

00000de0 <.Loc.467>:
			  return PIPE_RWSTREAM_CallbackAborted;
     de0:	c4 e0       	ldi	r28, 0x04	; 4
     de2:	f1 cf       	rjmp	.-30     	; 0xdc6 <.L106>

00000de4 <.L109>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
     de4:	ed 2f       	mov	r30, r29
     de6:	fd 2d       	mov	r31, r13

00000de8 <.LBB72>:
				return UPDATX;
     de8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>

00000dec <.LBE72>:
     dec:	81 93       	st	Z+, r24

00000dee <.LVL169>:
			Length--;
     dee:	01 50       	subi	r16, 0x01	; 1
     df0:	11 09       	sbc	r17, r1

00000df2 <.LVL170>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
     df2:	de 2f       	mov	r29, r30
     df4:	df 2e       	mov	r13, r31

00000df6 <.L108>:
	while (Length)
     df6:	01 15       	cp	r16, r1
     df8:	11 05       	cpc	r17, r1
     dfa:	29 f3       	breq	.-54     	; 0xdc6 <.L106>

00000dfc <.L111>:
		if (!(Pipe_IsReadWriteAllowed()))
     dfc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000e00 <.Loc.479>:
     e00:	85 fd       	sbrc	r24, 5
     e02:	f0 cf       	rjmp	.-32     	; 0xde4 <.L109>

00000e04 <.LBB74>:
			TEMPLATE_CLEAR_PIPE();
     e04:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000e08 <.LVL173>:
     e08:	98 2f       	mov	r25, r24
     e0a:	9e 7f       	andi	r25, 0xFE	; 254
     e0c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000e10 <.Loc.483>:
     e10:	8f 77       	andi	r24, 0x7F	; 127

00000e12 <.LVL174>:
     e12:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00000e16 <.LBE74>:
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     e16:	e1 14       	cp	r14, r1
     e18:	f1 04       	cpc	r15, r1
     e1a:	f1 f6       	brne	.-68     	; 0xdd8 <.L110>

00000e1c <.L112>:
			if ((ErrorCode = Pipe_WaitUntilReady()))
     e1c:	52 df       	rcall	.-348    	; 0xcc2 <Pipe_WaitUntilReady>

00000e1e <.LVL175>:
     e1e:	88 23       	and	r24, r24
     e20:	69 f3       	breq	.-38     	; 0xdfc <.L111>
     e22:	c8 2f       	mov	r28, r24
     e24:	d0 cf       	rjmp	.-96     	; 0xdc6 <.L106>

00000e26 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
     e26:	e8 ed       	ldi	r30, 0xD8	; 216
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 7f       	andi	r24, 0xFC	; 252
     e2e:	80 83       	st	Z, r24

00000e30 <.Loc.3>:
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);					
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e30:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000e34 <.Loc.5>:
	OTGIEN  = 0;
     e34:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000e38 <.Loc.7>:
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e38:	08 95       	ret

00000e3a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     e3a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>

00000e3e <.Loc.11>:
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     e3e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000e42 <.Loc.13>:
	OTGINT  = 0;
     e42:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000e46 <.Loc.15>:
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     e46:	08 95       	ret

00000e48 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e48:	1f 92       	push	r1

00000e4a <.LCFI0>:
     e4a:	0f 92       	push	r0

00000e4c <.LCFI1>:
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	0b b6       	in	r0, 0x3b	; 59
     e54:	0f 92       	push	r0
     e56:	2f 93       	push	r18

00000e58 <.LCFI2>:
     e58:	3f 93       	push	r19

00000e5a <.LCFI3>:
     e5a:	4f 93       	push	r20

00000e5c <.LCFI4>:
     e5c:	5f 93       	push	r21

00000e5e <.LCFI5>:
     e5e:	6f 93       	push	r22

00000e60 <.LCFI6>:
     e60:	7f 93       	push	r23

00000e62 <.LCFI7>:
     e62:	8f 93       	push	r24

00000e64 <.LCFI8>:
     e64:	9f 93       	push	r25

00000e66 <.LCFI9>:
     e66:	af 93       	push	r26

00000e68 <.LCFI10>:
     e68:	bf 93       	push	r27

00000e6a <.LCFI11>:
     e6a:	ef 93       	push	r30

00000e6c <.LCFI12>:
     e6c:	ff 93       	push	r31

00000e6e <.LCFI13>:
		EVENT_USB_Device_StartOfFrame();
	}
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e6e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000e72 <.Loc.19>:
     e72:	81 ff       	sbrs	r24, 1
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <.L4>

00000e76 <.Loc.20>:
     e76:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000e7a <.Loc.21>:
     e7a:	81 ff       	sbrs	r24, 1
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <.L4>

00000e7e <.Loc.22>:
	{
		USB_INT_Clear(USB_INT_DDISCI);
     e7e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e82:	8d 7f       	andi	r24, 0xFD	; 253
     e84:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000e88 <.Loc.24>:
		USB_INT_Clear(USB_INT_DCONNI);
     e88:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>

00000e92 <.Loc.27>:
		USB_INT_Disable(USB_INT_DDISCI);
     e92:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000e9c <.Loc.30>:
			
		EVENT_USB_Host_DeviceUnattached();
     e9c:	e7 da       	rcall	.-2610   	; 0x46c <EVENT_USB_Host_DeviceUnattached>

00000e9e <.LVL0>:

		USB_ResetInterface();
     e9e:	0f de       	rcall	.-994    	; 0xabe <USB_ResetInterface>

00000ea0 <.L4>:
	}
	
	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ea0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000ea4 <.Loc.35>:
     ea4:	81 ff       	sbrs	r24, 1
     ea6:	15 c0       	rjmp	.+42     	; 0xed2 <.L5>

00000ea8 <.Loc.36>:
     ea8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000eac <.Loc.37>:
     eac:	81 ff       	sbrs	r24, 1
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <.L5>

00000eb0 <.Loc.38>:
	{
		USB_INT_Clear(USB_INT_VBERRI);
     eb0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000eba <.Loc.40>:

		USB_Host_VBUS_Manual_Off();
     eba:	77 98       	cbi	0x0e, 7	; 14

00000ebc <.Loc.43>:
		USB_Host_VBUS_Auto_Off();
     ebc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

00000ec6 <.Loc.46>:

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	d8 da       	rcall	.-2640   	; 0x47a <EVENT_USB_Host_HostError>

00000eca <.LVL2>:
		EVENT_USB_Host_DeviceUnattached();
     eca:	d0 da       	rcall	.-2656   	; 0x46c <EVENT_USB_Host_DeviceUnattached>

00000ecc <.LVL3>:

		USB_HostState = HOST_STATE_Unattached;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000ed2 <.L5>:
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ed2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000ed6 <.Loc.53>:
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	17 c0       	rjmp	.+46     	; 0xf08 <.L6>

00000eda <.Loc.54>:
     eda:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000ede <.Loc.55>:
     ede:	80 ff       	sbrs	r24, 0
     ee0:	13 c0       	rjmp	.+38     	; 0xf08 <.L6>

00000ee2 <.Loc.56>:
	{
		USB_INT_Clear(USB_INT_SRPI);
     ee2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000eec <.Loc.58>:
		USB_INT_Disable(USB_INT_SRPI);
     eec:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000ef6 <.Loc.61>:
	
		EVENT_USB_Host_DeviceAttached();
     ef6:	b5 da       	rcall	.-2710   	; 0x462 <EVENT_USB_Host_DeviceAttached>

00000ef8 <.LVL4>:

		USB_INT_Enable(USB_INT_DDISCI);
     ef8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

00000f02 <.Loc.65>:
		
		USB_HostState = HOST_STATE_Powered;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <USB_HostState>

00000f08 <.L6>:
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f08:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000f0c <.Loc.70>:
     f0c:	82 ff       	sbrs	r24, 2
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <.L3>

00000f10 <.Loc.71>:
     f10:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

00000f14 <.Loc.72>:
     f14:	82 ff       	sbrs	r24, 2
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <.L3>

00000f18 <.Loc.73>:
	{
		USB_INT_Clear(USB_INT_BCERRI);
     f18:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f1c:	8b 7f       	andi	r24, 0xFB	; 251
     f1e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

00000f22 <.Loc.75>:
		
		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	b9 da       	rcall	.-2702   	; 0x49a <EVENT_USB_Host_DeviceEnumerationFailed>

00000f28 <.LVL5>:
		EVENT_USB_Host_DeviceUnattached();
     f28:	a1 da       	rcall	.-2750   	; 0x46c <EVENT_USB_Host_DeviceUnattached>

00000f2a <.LVL6>:

		USB_ResetInterface();
     f2a:	c9 dd       	rcall	.-1134   	; 0xabe <USB_ResetInterface>

00000f2c <.L3>:
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f52:	1f 93       	push	r17

00000f54 <.LCFI0>:
     f54:	cf 93       	push	r28

00000f56 <.LCFI1>:
     f56:	df 93       	push	r29

00000f58 <.LBB4>:
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_HostTask(void)
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();
     f58:	c7 ea       	ldi	r28, 0xA7	; 167
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	18 81       	ld	r17, Y

00000f5e <.Loc.5>:
     f5e:	17 70       	andi	r17, 0x07	; 7

00000f60 <.LVL0>:
	
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
     f60:	18 82       	st	Y, r1

00000f62 <.Loc.8>:

	USB_Host_ProcessNextHostState();
     f62:	42 db       	rcall	.-2428   	; 0x5e8 <USB_Host_ProcessNextHostState>

00000f64 <.LVL1>:
	
	Pipe_SelectPipe(PrevPipe);
     f64:	18 83       	st	Y, r17

00000f66 <.LBE4>:
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	08 95       	ret

00000f6e <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     f6e:	cf 92       	push	r12

00000f70 <.LCFI0>:
     f70:	df 92       	push	r13

00000f72 <.LCFI1>:
     f72:	ef 92       	push	r14

00000f74 <.LCFI2>:
     f74:	ff 92       	push	r15

00000f76 <.LCFI3>:
     f76:	0f 93       	push	r16

00000f78 <.LCFI4>:
     f78:	1f 93       	push	r17

00000f7a <.LCFI5>:
     f7a:	cf 93       	push	r28

00000f7c <.LCFI6>:
     f7c:	df 93       	push	r29

00000f7e <.LCFI7>:
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62

00000f82 <.LCFI8>:
     f82:	29 97       	sbiw	r28, 0x09	; 9

00000f84 <.LCFI9>:
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	6b 01       	movw	r12, r22
     f90:	8a 01       	movw	r16, r20
     f92:	79 01       	movw	r14, r18

00000f94 <.Loc.2>:
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f94:	90 e8       	ldi	r25, 0x80	; 128
     f96:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <USB_ControlRequest>
     f9a:	96 e0       	ldi	r25, 0x06	; 6
     f9c:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <USB_ControlRequest+0x1>

00000fa0 <.Loc.6>:
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	99 0b       	sbc	r25, r25

00000fa4 <.LVL1>:
     fa4:	92 60       	ori	r25, 0x02	; 2

00000fa6 <.Loc.8>:
	USB_ControlRequest = (USB_Request_Header_t)
     fa6:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <USB_ControlRequest+0x3>
     faa:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <USB_ControlRequest+0x2>
     fae:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <USB_ControlRequest+0x5>
     fb2:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <USB_ControlRequest+0x4>
     fb6:	89 e0       	ldi	r24, 0x09	; 9
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <USB_ControlRequest+0x7>
     fbe:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <USB_ControlRequest+0x6>

00000fc2 <.Loc.10>:
			.wIndex        = 0,
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};
	
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
     fc2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00000fc6 <.Loc.11>:

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	74 dc       	rcall	.-1816   	; 0x8b4 <USB_Host_SendControlRequest>

00000fcc <.LVL2>:
     fcc:	81 11       	cpse	r24, r1
     fce:	17 c0       	rjmp	.+46     	; 0xffe <.L1>

00000fd0 <.Loc.15>:
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_CAST(ConfigHeader, USB_Descriptor_Configuration_Header_t).TotalConfigurationSize;
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04

00000fd4 <.LVL3>:
     fd4:	f6 01       	movw	r30, r12
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24

00000fda <.Loc.18>:

	if (*ConfigSizePtr > BufferSize)
     fda:	e8 16       	cp	r14, r24
     fdc:	f9 06       	cpc	r15, r25
     fde:	70 f0       	brcs	.+28     	; 0xffc <.L3>

00000fe0 <.Loc.20>:
	  return HOST_GETCONFIG_BuffOverflow;
	  
	USB_ControlRequest.wLength = *ConfigSizePtr;
     fe0:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <USB_ControlRequest+0x7>
     fe4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <USB_ControlRequest+0x6>

00000fe8 <.Loc.22>:
	
	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fe8:	c8 01       	movw	r24, r16
     fea:	64 dc       	rcall	.-1848   	; 0x8b4 <USB_Host_SendControlRequest>

00000fec <.LVL4>:
     fec:	81 11       	cpse	r24, r1
     fee:	07 c0       	rjmp	.+14     	; 0xffe <.L1>

00000ff0 <.Loc.25>:
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ff0:	f8 01       	movw	r30, r16
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	92 30       	cpi	r25, 0x02	; 2
     ff6:	19 f0       	breq	.+6      	; 0xffe <.L1>

00000ff8 <.Loc.27>:
	  return HOST_GETCONFIG_InvalidData;
     ff8:	86 e0       	ldi	r24, 0x06	; 6

00000ffa <.LVL5>:
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <.L1>

00000ffc <.L3>:
	  return HOST_GETCONFIG_BuffOverflow;
     ffc:	85 e0       	ldi	r24, 0x05	; 5

00000ffe <.L1>:
	
	return HOST_GETCONFIG_Successful;
}
     ffe:	29 96       	adiw	r28, 0x09	; 9
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16

00001012 <.LVL7>:
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14

00001016 <.LVL8>:
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12

0000101a <.LVL9>:
    101a:	08 95       	ret

0000101c <USB_GetNextDescriptorComp>:
	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
			
uint8_t USB_GetNextDescriptorComp(uint16_t* BytesRem, void** CurrConfigLoc, ConfigComparatorPtr_t ComparatorRoutine)
{
    101c:	af 92       	push	r10

0000101e <.LCFI19>:
    101e:	bf 92       	push	r11

00001020 <.LCFI20>:
    1020:	cf 92       	push	r12

00001022 <.LCFI21>:
    1022:	df 92       	push	r13

00001024 <.LCFI22>:
    1024:	ef 92       	push	r14

00001026 <.LCFI23>:
    1026:	ff 92       	push	r15

00001028 <.LCFI24>:
    1028:	0f 93       	push	r16

0000102a <.LCFI25>:
    102a:	1f 93       	push	r17

0000102c <.LCFI26>:
    102c:	cf 93       	push	r28

0000102e <.LCFI27>:
    102e:	df 93       	push	r29

00001030 <.LCFI28>:
    1030:	ec 01       	movw	r28, r24
    1032:	8b 01       	movw	r16, r22
    1034:	6a 01       	movw	r12, r20

00001036 <.L20>:
	uint8_t ErrorCode;
		
	while (*BytesRem)
    1036:	e8 80       	ld	r14, Y
    1038:	f9 80       	ldd	r15, Y+1	; 0x01
    103a:	e1 14       	cp	r14, r1
    103c:	f1 04       	cpc	r15, r1
    103e:	11 f4       	brne	.+4      	; 0x1044 <.L23>

00001040 <.Loc.93>:
		
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	1c c0       	rjmp	.+56     	; 0x107c <.L19>

00001044 <.L23>:
		uint8_t*  PrevDescLoc  = *CurrConfigLoc;
    1044:	f8 01       	movw	r30, r16
    1046:	a0 80       	ld	r10, Z
    1048:	b1 80       	ldd	r11, Z+1	; 0x01

0000104a <.LBB14>:
			                                         void** const CurrConfigLoc) 
			                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** const CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    104a:	f5 01       	movw	r30, r10

0000104c <.LVL33>:
    104c:	20 81       	ld	r18, Z
    104e:	30 e0       	ldi	r19, 0x00	; 0

00001050 <.LVL34>:

				*CurrConfigLoc += CurrDescriptorSize;
    1050:	c5 01       	movw	r24, r10
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	f8 01       	movw	r30, r16
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24

0000105c <.Loc.104>:
				*BytesRem      -= CurrDescriptorSize;
    105c:	a7 01       	movw	r20, r14
    105e:	42 1b       	sub	r20, r18
    1060:	53 0b       	sbc	r21, r19
    1062:	59 83       	std	Y+1, r21	; 0x01
    1064:	48 83       	st	Y, r20

00001066 <.LBE14>:
		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1066:	f6 01       	movw	r30, r12
    1068:	09 95       	icall

0000106a <.LVL36>:
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	21 f3       	breq	.-56     	; 0x1036 <.L20>

0000106e <.Loc.110>:
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	29 f4       	brne	.+10     	; 0x107c <.L19>

00001072 <.Loc.112>:
				*CurrConfigLoc = PrevDescLoc;
    1072:	f8 01       	movw	r30, r16
    1074:	b1 82       	std	Z+1, r11	; 0x01
    1076:	a0 82       	st	Z, r10

00001078 <.Loc.114>:
				*BytesRem      = PrevBytesRem;
    1078:	f9 82       	std	Y+1, r15	; 0x01
    107a:	e8 82       	st	Y, r14

0000107c <.L19>:
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28

00001080 <.LVL38>:
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16

00001084 <.LVL39>:
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12

0000108c <.LVL40>:
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	08 95       	ret

00001092 <DComp_MIDI_Host_NextMIDIStreamingInterface>:
	MIDIInterfaceInfo->State.IsActive = true;
	return MIDI_ENUMERROR_NoError;
}

static uint8_t DComp_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    1092:	fc 01       	movw	r30, r24

00001094 <.Loc.2>:
	if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Interface)
    1094:	81 81       	ldd	r24, Z+1	; 0x01

00001096 <.LVL1>:
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	69 f4       	brne	.+26     	; 0x10b4 <.L6>

0000109a <.LBB2>:
	{
		USB_Descriptor_Interface_t* CurrentInterface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                                USB_Descriptor_Interface_t);

		if ((CurrentInterface->Class    == MIDI_STREAMING_CLASS)    &&
    109a:	85 81       	ldd	r24, Z+5	; 0x05
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	51 f4       	brne	.+20     	; 0x10b4 <.L6>

000010a0 <.Loc.8>:
    10a0:	86 81       	ldd	r24, Z+6	; 0x06
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <.L6>

000010a6 <.Loc.9>:
		    (CurrentInterface->SubClass == MIDI_STREAMING_SUBCLASS) &&
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	97 81       	ldd	r25, Z+7	; 0x07
    10aa:	91 11       	cpse	r25, r1
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <.L3>
    10ae:	80 e0       	ldi	r24, 0x00	; 0

000010b0 <.L3>:
    10b0:	88 0f       	add	r24, r24
    10b2:	08 95       	ret

000010b4 <.L6>:
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	
	return DESCRIPTOR_SEARCH_NotFound;
    10b4:	82 e0       	ldi	r24, 0x02	; 2

000010b6 <.Loc.12>:
}
    10b6:	08 95       	ret

000010b8 <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint>:

static uint8_t DComp_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    10b8:	fc 01       	movw	r30, r24

000010ba <.Loc.15>:
	if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Endpoint)
    10ba:	81 81       	ldd	r24, Z+1	; 0x01

000010bc <.LVL5>:
    10bc:	85 30       	cpi	r24, 0x05	; 5
    10be:	41 f4       	brne	.+16     	; 0x10d0 <.L8>

000010c0 <.LBB3>:
	{
		USB_Descriptor_Endpoint_t* CurrentEndpoint = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                              USB_Descriptor_Endpoint_t);
	
		uint8_t EndpointType = (CurrentEndpoint->Attributes & EP_TYPE_MASK);
    10c0:	83 81       	ldd	r24, Z+3	; 0x03
    10c2:	83 70       	andi	r24, 0x03	; 3

000010c4 <.LVL7>:
	
		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(CurrentEndpoint->EndpointAddress)))
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	41 f4       	brne	.+16     	; 0x10d8 <.L11>

000010c8 <.Loc.23>:
    10c8:	82 81       	ldd	r24, Z+2	; 0x02

000010ca <.LVL8>:
    10ca:	d1 dd       	rcall	.-1118   	; 0xc6e <Pipe_IsEndpointBound>

000010cc <.LVL9>:
    10cc:	88 0f       	add	r24, r24
    10ce:	08 95       	ret

000010d0 <.L8>:
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Interface)
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <.L11>

000010d4 <.Loc.29>:
	{
		return DESCRIPTOR_SEARCH_Fail;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	08 95       	ret

000010d8 <.L11>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10d8:	82 e0       	ldi	r24, 0x02	; 2

000010da <.Loc.31>:
}
    10da:	08 95       	ret

000010dc <MIDI_Host_ConfigurePipes>:
{
    10dc:	5f 92       	push	r5

000010de <.LCFI0>:
    10de:	6f 92       	push	r6

000010e0 <.LCFI1>:
    10e0:	7f 92       	push	r7

000010e2 <.LCFI2>:
    10e2:	8f 92       	push	r8

000010e4 <.LCFI3>:
    10e4:	9f 92       	push	r9

000010e6 <.LCFI4>:
    10e6:	af 92       	push	r10

000010e8 <.LCFI5>:
    10e8:	bf 92       	push	r11

000010ea <.LCFI6>:
    10ea:	cf 92       	push	r12

000010ec <.LCFI7>:
    10ec:	df 92       	push	r13

000010ee <.LCFI8>:
    10ee:	ef 92       	push	r14

000010f0 <.LCFI9>:
    10f0:	ff 92       	push	r15

000010f2 <.LCFI10>:
    10f2:	0f 93       	push	r16

000010f4 <.LCFI11>:
    10f4:	1f 93       	push	r17

000010f6 <.LCFI12>:
    10f6:	cf 93       	push	r28

000010f8 <.LCFI13>:
    10f8:	df 93       	push	r29

000010fa <.LCFI14>:
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <L0^A>

000010fc <L0^A>:
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <L0^A>

000010fe <L0^A>:
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62

00001102 <.LCFI16>:
    1102:	6c 01       	movw	r12, r24
    1104:	7a 83       	std	Y+2, r23	; 0x02
    1106:	69 83       	std	Y+1, r22	; 0x01
    1108:	5c 83       	std	Y+4, r21	; 0x04
    110a:	4b 83       	std	Y+3, r20	; 0x03

0000110c <.LVL12>:
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    110c:	fc 01       	movw	r30, r24
    110e:	34 96       	adiw	r30, 0x04	; 4
    1110:	85 e0       	ldi	r24, 0x05	; 5

00001112 <.LVL13>:
    1112:	df 01       	movw	r26, r30

00001114 <.L0^B1>:
    1114:	1d 92       	st	X+, r1
    1116:	8a 95       	dec	r24
    1118:	e9 f7       	brne	.-6      	; 0x1114 <.L0^B1>

0000111a <.Loc.37>:
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    111a:	eb 81       	ldd	r30, Y+3	; 0x03
    111c:	fc 81       	ldd	r31, Y+4	; 0x04
    111e:	f1 80       	ldd	r15, Z+1	; 0x01

00001120 <.Loc.39>:
    1120:	b2 e0       	ldi	r27, 0x02	; 2
    1122:	fb 12       	cpse	r15, r27
    1124:	6a c0       	rjmp	.+212    	; 0x11fa <.L17>

00001126 <.Loc.40>:
	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1126:	4e 01       	movw	r8, r28
    1128:	e3 e0       	ldi	r30, 0x03	; 3
    112a:	8e 0e       	add	r8, r30
    112c:	91 1c       	adc	r9, r1
    112e:	49 e4       	ldi	r20, 0x49	; 73
    1130:	58 e0       	ldi	r21, 0x08	; 8

00001132 <.LVL14>:
    1132:	b4 01       	movw	r22, r8

00001134 <.LVL15>:
    1134:	8e 01       	movw	r16, r28
    1136:	0f 5f       	subi	r16, 0xFF	; 255
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	c8 01       	movw	r24, r16
    113c:	6f df       	rcall	.-290    	; 0x101c <USB_GetNextDescriptorComp>

0000113e <.LVL16>:
    113e:	b8 2e       	mov	r11, r24
    1140:	a8 2c       	mov	r10, r8
    1142:	79 2c       	mov	r7, r9
    1144:	60 2e       	mov	r6, r16
    1146:	51 2e       	mov	r5, r17

00001148 <.Loc.45>:
    1148:	81 11       	cpse	r24, r1
    114a:	2c c0       	rjmp	.+88     	; 0x11a4 <.L12>

0000114c <.L16>:
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    114c:	4c e5       	ldi	r20, 0x5C	; 92
    114e:	58 e0       	ldi	r21, 0x08	; 8
    1150:	6a 2d       	mov	r22, r10
    1152:	77 2d       	mov	r23, r7
    1154:	86 2d       	mov	r24, r6
    1156:	95 2d       	mov	r25, r5
    1158:	61 df       	rcall	.-318    	; 0x101c <USB_GetNextDescriptorComp>

0000115a <.LVL18>:
    115a:	f8 2e       	mov	r15, r24

0000115c <.Loc.48>:
    115c:	81 11       	cpse	r24, r1
    115e:	50 c0       	rjmp	.+160    	; 0x1200 <.L18>

00001160 <.Loc.49>:
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1160:	8b 80       	ldd	r8, Y+3	; 0x03
    1162:	9c 80       	ldd	r9, Y+4	; 0x04

00001164 <.LVL19>:
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1164:	d4 01       	movw	r26, r8
    1166:	12 96       	adiw	r26, 0x02	; 2
    1168:	2c 91       	ld	r18, X
    116a:	12 97       	sbiw	r26, 0x02	; 2

0000116c <.Loc.53>:
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataINPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_IN,
    116c:	14 96       	adiw	r26, 0x04	; 4
    116e:	0d 91       	ld	r16, X+
    1170:	1c 91       	ld	r17, X

00001172 <.Loc.54>:
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1172:	27 ff       	sbrs	r18, 7
    1174:	2c c0       	rjmp	.+88     	; 0x11ce <.L14>

00001176 <.Loc.55>:
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataINPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_IN,
    1176:	f6 01       	movw	r30, r12
    1178:	e1 80       	ldd	r14, Z+1	; 0x01
    117a:	ee 0c       	add	r14, r14
    117c:	ee 0c       	add	r14, r14
    117e:	40 e1       	ldi	r20, 0x10	; 16
    1180:	62 e0       	ldi	r22, 0x02	; 2
    1182:	80 81       	ld	r24, Z
    1184:	0c dd       	rcall	.-1512   	; 0xb9e <Pipe_ConfigurePipe>

00001186 <.LVL20>:
			MIDIInterfaceInfo->State.DataINPipeSize = EndpointData->EndpointSize;
    1186:	d4 01       	movw	r26, r8
    1188:	14 96       	adiw	r26, 0x04	; 4
    118a:	8d 91       	ld	r24, X+
    118c:	9c 91       	ld	r25, X
    118e:	f6 01       	movw	r30, r12
    1190:	96 83       	std	Z+6, r25	; 0x06
    1192:	85 83       	std	Z+5, r24	; 0x05

00001194 <.Loc.58>:
			FoundEndpoints |= MIDI_FOUND_DATAPIPE_IN;
    1194:	68 94       	set
    1196:	b0 f8       	bld	r11, 0

00001198 <.L15>:
	while (FoundEndpoints != (MIDI_FOUND_DATAPIPE_IN | MIDI_FOUND_DATAPIPE_OUT))
    1198:	b3 e0       	ldi	r27, 0x03	; 3
    119a:	bb 12       	cpse	r11, r27
    119c:	d7 cf       	rjmp	.-82     	; 0x114c <.L16>

0000119e <.Loc.62>:
	MIDIInterfaceInfo->State.IsActive = true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	f6 01       	movw	r30, r12
    11a2:	84 83       	std	Z+4, r24	; 0x04

000011a4 <.L12>:
}
    11a4:	8f 2d       	mov	r24, r15
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12

000011be <.LVL23>:
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	7f 90       	pop	r7
    11c8:	6f 90       	pop	r6
    11ca:	5f 90       	pop	r5
    11cc:	08 95       	ret

000011ce <.L14>:
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    11ce:	d6 01       	movw	r26, r12
    11d0:	13 96       	adiw	r26, 0x03	; 3
    11d2:	ec 90       	ld	r14, X
    11d4:	13 97       	sbiw	r26, 0x03	; 3
    11d6:	ee 0c       	add	r14, r14
    11d8:	ee 0c       	add	r14, r14
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	8c 91       	ld	r24, X
    11e2:	dd dc       	rcall	.-1606   	; 0xb9e <Pipe_ConfigurePipe>

000011e4 <.LVL25>:
			MIDIInterfaceInfo->State.DataOUTPipeSize = EndpointData->EndpointSize;
    11e4:	f4 01       	movw	r30, r8
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	95 81       	ldd	r25, Z+5	; 0x05
    11ea:	d6 01       	movw	r26, r12
    11ec:	18 96       	adiw	r26, 0x08	; 8
    11ee:	9c 93       	st	X, r25
    11f0:	8e 93       	st	-X, r24
    11f2:	17 97       	sbiw	r26, 0x07	; 7

000011f4 <.Loc.70>:
			FoundEndpoints |= MIDI_FOUND_DATAPIPE_OUT;
    11f4:	68 94       	set
    11f6:	b1 f8       	bld	r11, 1

000011f8 <.Loc.72>:
    11f8:	cf cf       	rjmp	.-98     	; 0x1198 <.L15>

000011fa <.L17>:
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
    11fa:	ff 24       	eor	r15, r15
    11fc:	f3 94       	inc	r15
    11fe:	d2 cf       	rjmp	.-92     	; 0x11a4 <.L12>

00001200 <.L18>:
			return MIDI_ENUMERROR_EndpointsNotFound;
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	f8 2e       	mov	r15, r24
    1204:	cf cf       	rjmp	.-98     	; 0x11a4 <.L12>

00001206 <MIDI_Host_Flush>:

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    1206:	fc 01       	movw	r30, r24

00001208 <.Loc.78>:
	if (USB_HostState != HOST_STATE_Configured)
    1208:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_HostState>

0000120c <.LVL30>:
    120c:	8c 30       	cpi	r24, 0x0C	; 12
    120e:	99 f4       	brne	.+38     	; 0x1236 <.L22>

00001210 <.Loc.81>:
	  return PIPE_RWSTREAM_DeviceDisconnected;
	
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00001216 <.Loc.84>:

	if (Pipe_BytesInPipe())
    1216:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    121a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

0000121e <.Loc.87>:
    121e:	89 2b       	or	r24, r25
    1220:	61 f0       	breq	.+24     	; 0x123a <.L23>

00001222 <.LBB7>:
	{
		Pipe_ClearOUT();
    1222:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001226 <.LVL31>:
    1226:	98 2f       	mov	r25, r24
    1228:	9b 7f       	andi	r25, 0xFB	; 251
    122a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

0000122e <.Loc.91>:
    122e:	8f 77       	andi	r24, 0x7F	; 127

00001230 <.LVL32>:
    1230:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001234 <.LBE7>:

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1234:	46 cd       	rjmp	.-1396   	; 0xcc2 <Pipe_WaitUntilReady>

00001236 <.L22>:
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	08 95       	ret

0000123a <.L23>:
		  return ErrorCode;
	}

	return PIPE_READYWAIT_NoError;
    123a:	80 e0       	ldi	r24, 0x00	; 0

0000123c <.Loc.98>:
}
    123c:	08 95       	ret

0000123e <MIDI_Host_SendEventPacket>:

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo, MIDI_EventPacket_t* const Event)
{
    123e:	fc 01       	movw	r30, r24
    1240:	cb 01       	movw	r24, r22

00001242 <.LVL35>:
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1242:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <USB_HostState>

00001246 <.Loc.103>:
    1246:	2c 30       	cpi	r18, 0x0C	; 12
    1248:	01 f5       	brne	.+64     	; 0x128a <.L30>

0000124a <.Loc.104>:
    124a:	24 81       	ldd	r18, Z+4	; 0x04
    124c:	22 23       	and	r18, r18
    124e:	e9 f0       	breq	.+58     	; 0x128a <.L30>

00001250 <.Loc.105>:
	  return HOST_SENDCONTROL_DeviceDisconnected;
	
	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1250:	22 81       	ldd	r18, Z+2	; 0x02
    1252:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

00001256 <.Loc.107>:

	if (Pipe_IsReadWriteAllowed())
    1256:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

0000125a <.Loc.110>:
    125a:	25 ff       	sbrs	r18, 5
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <.L27>

0000125e <.LBB8>:
	{
		uint8_t ErrorCode;

		if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	64 e0       	ldi	r22, 0x04	; 4
    1264:	70 e0       	ldi	r23, 0x00	; 0

00001266 <.LVL36>:
    1266:	55 dd       	rcall	.-1366   	; 0xd12 <Pipe_Write_Stream_LE>

00001268 <.LVL37>:
    1268:	81 11       	cpse	r24, r1
    126a:	10 c0       	rjmp	.+32     	; 0x128c <.L24>

0000126c <.Loc.116>:
		  return ErrorCode;

		if (!(Pipe_IsReadWriteAllowed()))
    126c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001270 <.LVL38>:
    1270:	85 fd       	sbrc	r24, 5
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <.L27>

00001274 <.LBB9>:
		  Pipe_ClearOUT();
    1274:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001278 <.LVL39>:
    1278:	98 2f       	mov	r25, r24
    127a:	9b 7f       	andi	r25, 0xFB	; 251
    127c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001280 <.Loc.122>:
    1280:	8f 77       	andi	r24, 0x7F	; 127

00001282 <.LVL40>:
    1282:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

00001286 <.L27>:
	}
	
	return PIPE_RWSTREAM_NoError;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret

0000128a <.L30>:
	  return HOST_SENDCONTROL_DeviceDisconnected;
    128a:	81 e0       	ldi	r24, 0x01	; 1

0000128c <.L24>:
}
    128c:	08 95       	ret

0000128e <MIDI_Host_ReceiveEventPacket>:

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo, MIDI_EventPacket_t* const Event)
{
    128e:	fc 01       	movw	r30, r24
    1290:	cb 01       	movw	r24, r22

00001292 <.LVL45>:
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1292:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <USB_HostState>

00001296 <.Loc.132>:
    1296:	2c 30       	cpi	r18, 0x0C	; 12
    1298:	e1 f4       	brne	.+56     	; 0x12d2 <.L33>

0000129a <.Loc.133>:
    129a:	24 81       	ldd	r18, Z+4	; 0x04
    129c:	22 23       	and	r18, r18
    129e:	c9 f0       	breq	.+50     	; 0x12d2 <.L33>

000012a0 <.Loc.134>:
	  return HOST_SENDCONTROL_DeviceDisconnected;
	
	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    12a0:	20 81       	ld	r18, Z
    12a2:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

000012a6 <.Loc.136>:

	if (!(Pipe_IsReadWriteAllowed()))
    12a6:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000012aa <.Loc.139>:
    12aa:	25 ff       	sbrs	r18, 5
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <.L36>

000012ae <.Loc.140>:
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK);
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	64 e0       	ldi	r22, 0x04	; 4
    12b4:	70 e0       	ldi	r23, 0x00	; 0

000012b6 <.LVL46>:
    12b6:	72 dd       	rcall	.-1308   	; 0xd9c <Pipe_Read_Stream_LE>

000012b8 <.LVL47>:

	if (!(Pipe_IsReadWriteAllowed()))
    12b8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000012bc <.Loc.144>:
    12bc:	85 fd       	sbrc	r24, 5
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <.L33>

000012c0 <.LBB10>:
	  Pipe_ClearIN();
    12c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000012c4 <.LVL48>:
    12c4:	98 2f       	mov	r25, r24
    12c6:	9e 7f       	andi	r25, 0xFE	; 254
    12c8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000012cc <.Loc.148>:
    12cc:	8f 77       	andi	r24, 0x7F	; 127

000012ce <.LVL49>:
    12ce:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

000012d2 <.L33>:
	  return HOST_SENDCONTROL_DeviceDisconnected;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	08 95       	ret

000012d6 <.L36>:
	  return false;
    12d6:	80 e0       	ldi	r24, 0x00	; 0

000012d8 <.Loc.153>:
	
	return true;
}
    12d8:	08 95       	ret

000012da <__tablejump2__>:
    12da:	ee 0f       	add	r30, r30

000012dc <.Loc.1>:
    12dc:	ff 1f       	adc	r31, r31

000012de <.Loc.2>:
    12de:	00 24       	eor	r0, r0

000012e0 <.Loc.3>:
    12e0:	00 1c       	adc	r0, r0

000012e2 <.Loc.4>:
    12e2:	0b be       	out	0x3b, r0	; 59

000012e4 <.Loc.5>:
    12e4:	07 90       	elpm	r0, Z+

000012e6 <.Loc.6>:
    12e6:	f6 91       	elpm	r31, Z

000012e8 <.Loc.7>:
    12e8:	e0 2d       	mov	r30, r0

000012ea <.Loc.8>:
    12ea:	09 94       	ijmp

000012ec <printf_P>:
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	ae 01       	movw	r20, r28
    12fa:	49 5f       	subi	r20, 0xF9	; 249
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	da 01       	movw	r26, r20
    1300:	6d 91       	ld	r22, X+
    1302:	7d 91       	ld	r23, X+
    1304:	ad 01       	movw	r20, r26
    1306:	00 ee       	ldi	r16, 0xE0	; 224
    1308:	11 e0       	ldi	r17, 0x01	; 1
    130a:	f8 01       	movw	r30, r16
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	dc 01       	movw	r26, r24
    1312:	13 96       	adiw	r26, 0x03	; 3
    1314:	2c 91       	ld	r18, X
    1316:	13 97       	sbiw	r26, 0x03	; 3
    1318:	28 60       	ori	r18, 0x08	; 8
    131a:	13 96       	adiw	r26, 0x03	; 3
    131c:	2c 93       	st	X, r18
    131e:	66 d0       	rcall	.+204    	; 0x13ec <vfprintf>
    1320:	d8 01       	movw	r26, r16
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	ed 91       	ld	r30, X+
    1326:	fc 91       	ld	r31, X
    1328:	23 81       	ldd	r18, Z+3	; 0x03
    132a:	27 7f       	andi	r18, 0xF7	; 247
    132c:	23 83       	std	Z+3, r18	; 0x03
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <puts>:
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__iob+0x2>
    1344:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__iob+0x3>
    1348:	23 81       	ldd	r18, Z+3	; 0x03
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	00 e0       	ldi	r16, 0x00	; 0
    134e:	21 fd       	sbrc	r18, 1
    1350:	0e c0       	rjmp	.+28     	; 0x136e <.L2>

00001352 <.L6>:
    1352:	0f ef       	ldi	r16, 0xFF	; 255
    1354:	1f ef       	ldi	r17, 0xFF	; 255

00001356 <.L1>:
    1356:	c8 01       	movw	r24, r16
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <.L5>:
    1362:	09 95       	icall
    1364:	89 2b       	or	r24, r25
    1366:	11 f0       	breq	.+4      	; 0x136c <.L4>
    1368:	0f ef       	ldi	r16, 0xFF	; 255
    136a:	1f ef       	ldi	r17, 0xFF	; 255

0000136c <.L4>:
    136c:	ce 01       	movw	r24, r28

0000136e <.L2>:
    136e:	ec 01       	movw	r28, r24
    1370:	89 91       	ld	r24, Y+
    1372:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <__iob+0x2>
    1376:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <__iob+0x3>
    137a:	db 01       	movw	r26, r22
    137c:	18 96       	adiw	r26, 0x08	; 8
    137e:	ed 91       	ld	r30, X+
    1380:	fc 91       	ld	r31, X
    1382:	81 11       	cpse	r24, r1
    1384:	ee cf       	rjmp	.-36     	; 0x1362 <.L5>
    1386:	8a e0       	ldi	r24, 0x0A	; 10
    1388:	09 95       	icall
    138a:	89 2b       	or	r24, r25
    138c:	21 f3       	breq	.-56     	; 0x1356 <.L1>
    138e:	e1 cf       	rjmp	.-62     	; 0x1352 <.L6>

00001390 <puts_P>:
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	8c 01       	movw	r16, r24
    139a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__iob+0x2>
    139e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__iob+0x3>
    13a2:	83 81       	ldd	r24, Z+3	; 0x03
    13a4:	d0 e0       	ldi	r29, 0x00	; 0
    13a6:	c0 e0       	ldi	r28, 0x00	; 0
    13a8:	81 fd       	sbrc	r24, 1
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <.L2>

000013ac <.L6>:
    13ac:	cf ef       	ldi	r28, 0xFF	; 255
    13ae:	df ef       	ldi	r29, 0xFF	; 255

000013b0 <.L1>:
    13b0:	ce 01       	movw	r24, r28
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <.L5>:
    13bc:	09 95       	icall
    13be:	89 2b       	or	r24, r25
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <.L4>
    13c2:	cf ef       	ldi	r28, 0xFF	; 255
    13c4:	df ef       	ldi	r29, 0xFF	; 255

000013c6 <.L4>:
    13c6:	0f 5f       	subi	r16, 0xFF	; 255
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255

000013ca <.L2>:
    13ca:	f8 01       	movw	r30, r16
    13cc:	84 91       	lpm	r24, Z
    13ce:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <__iob+0x2>
    13d2:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <__iob+0x3>
    13d6:	db 01       	movw	r26, r22
    13d8:	18 96       	adiw	r26, 0x08	; 8
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	81 11       	cpse	r24, r1
    13e0:	ed cf       	rjmp	.-38     	; 0x13bc <.L5>
    13e2:	8a e0       	ldi	r24, 0x0A	; 10
    13e4:	09 95       	icall
    13e6:	89 2b       	or	r24, r25
    13e8:	19 f3       	breq	.-58     	; 0x13b0 <.L1>
    13ea:	e0 cf       	rjmp	.-64     	; 0x13ac <.L6>

000013ec <vfprintf>:
    13ec:	2f 92       	push	r2
    13ee:	3f 92       	push	r3
    13f0:	4f 92       	push	r4
    13f2:	5f 92       	push	r5
    13f4:	6f 92       	push	r6
    13f6:	7f 92       	push	r7
    13f8:	8f 92       	push	r8
    13fa:	9f 92       	push	r9
    13fc:	af 92       	push	r10
    13fe:	bf 92       	push	r11
    1400:	cf 92       	push	r12
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	2b 97       	sbiw	r28, 0x0b	; 11
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	7c 01       	movw	r14, r24
    1422:	3b 01       	movw	r6, r22
    1424:	8a 01       	movw	r16, r20
    1426:	fc 01       	movw	r30, r24
    1428:	17 82       	std	Z+7, r1	; 0x07
    142a:	16 82       	std	Z+6, r1	; 0x06
    142c:	83 81       	ldd	r24, Z+3	; 0x03
    142e:	81 ff       	sbrs	r24, 1
    1430:	c1 c1       	rjmp	.+898    	; 0x17b4 <.L71>
    1432:	9a e0       	ldi	r25, 0x0A	; 10
    1434:	29 2e       	mov	r2, r25
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	5c 01       	movw	r10, r24

0000143c <.L3>:
    143c:	f7 01       	movw	r30, r14
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	f3 01       	movw	r30, r6
    1442:	93 fd       	sbrc	r25, 3
    1444:	85 91       	lpm	r24, Z+
    1446:	93 ff       	sbrs	r25, 3
    1448:	81 91       	ld	r24, Z+
    144a:	3f 01       	movw	r6, r30
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <L0^A+0x2>

00001450 <L0^A>:
    1450:	3c c1       	rjmp	.+632    	; 0x16ca <.L4>
    1452:	85 32       	cpi	r24, 0x25	; 37
    1454:	39 f4       	brne	.+14     	; 0x1464 <.L5>
    1456:	93 fd       	sbrc	r25, 3
    1458:	85 91       	lpm	r24, Z+
    145a:	93 ff       	sbrs	r25, 3
    145c:	81 91       	ld	r24, Z+
    145e:	3f 01       	movw	r6, r30
    1460:	85 32       	cpi	r24, 0x25	; 37
    1462:	21 f4       	brne	.+8      	; 0x146c <.L72>

00001464 <.L5>:
    1464:	b7 01       	movw	r22, r14
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	be d1       	rcall	.+892    	; 0x17e6 <fputc>
    146a:	e8 cf       	rjmp	.-48     	; 0x143c <.L3>

0000146c <.L72>:
    146c:	91 2c       	mov	r9, r1
    146e:	41 2c       	mov	r4, r1
    1470:	51 2c       	mov	r5, r1

00001472 <.L6>:
    1472:	ff e1       	ldi	r31, 0x1F	; 31
    1474:	f5 15       	cp	r31, r5
    1476:	38 f0       	brcs	.+14     	; 0x1486 <.L8>
    1478:	8b 32       	cpi	r24, 0x2B	; 43
    147a:	09 f1       	breq	.+66     	; 0x14be <.L9>
    147c:	88 f4       	brcc	.+34     	; 0x14a0 <.L10>
    147e:	80 32       	cpi	r24, 0x20	; 32
    1480:	01 f1       	breq	.+64     	; 0x14c2 <.L11>
    1482:	83 32       	cpi	r24, 0x23	; 35
    1484:	21 f1       	breq	.+72     	; 0x14ce <.L12>

00001486 <.L8>:
    1486:	57 fc       	sbrc	r5, 7
    1488:	3a c0       	rjmp	.+116    	; 0x14fe <.L15>
    148a:	20 ed       	ldi	r18, 0xD0	; 208
    148c:	28 0f       	add	r18, r24
    148e:	2a 30       	cpi	r18, 0x0A	; 10
    1490:	40 f5       	brcc	.+80     	; 0x14e2 <.L16>
    1492:	56 fe       	sbrs	r5, 6
    1494:	1f c0       	rjmp	.+62     	; 0x14d4 <.L17>
    1496:	92 9c       	mul	r9, r2
    1498:	20 0d       	add	r18, r0
    149a:	11 24       	eor	r1, r1
    149c:	92 2e       	mov	r9, r18
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <.L14>

000014a0 <.L10>:
    14a0:	8d 32       	cpi	r24, 0x2D	; 45
    14a2:	91 f0       	breq	.+36     	; 0x14c8 <.L13>
    14a4:	80 33       	cpi	r24, 0x30	; 48
    14a6:	79 f7       	brne	.-34     	; 0x1486 <.L8>
    14a8:	68 94       	set
    14aa:	50 f8       	bld	r5, 0

000014ac <.L14>:
    14ac:	f3 01       	movw	r30, r6
    14ae:	93 fd       	sbrc	r25, 3
    14b0:	85 91       	lpm	r24, Z+
    14b2:	93 ff       	sbrs	r25, 3
    14b4:	81 91       	ld	r24, Z+
    14b6:	3f 01       	movw	r6, r30
    14b8:	81 11       	cpse	r24, r1
    14ba:	db cf       	rjmp	.-74     	; 0x1472 <.L6>
    14bc:	20 c0       	rjmp	.+64     	; 0x14fe <.L15>

000014be <.L9>:
    14be:	68 94       	set
    14c0:	51 f8       	bld	r5, 1

000014c2 <.L11>:
    14c2:	68 94       	set
    14c4:	52 f8       	bld	r5, 2
    14c6:	f2 cf       	rjmp	.-28     	; 0x14ac <.L14>

000014c8 <.L13>:
    14c8:	68 94       	set
    14ca:	53 f8       	bld	r5, 3
    14cc:	ef cf       	rjmp	.-34     	; 0x14ac <.L14>

000014ce <.L12>:
    14ce:	68 94       	set
    14d0:	54 f8       	bld	r5, 4
    14d2:	ec cf       	rjmp	.-40     	; 0x14ac <.L14>

000014d4 <.L17>:
    14d4:	42 9c       	mul	r4, r2
    14d6:	20 0d       	add	r18, r0
    14d8:	11 24       	eor	r1, r1
    14da:	42 2e       	mov	r4, r18
    14dc:	68 94       	set
    14de:	55 f8       	bld	r5, 5
    14e0:	e5 cf       	rjmp	.-54     	; 0x14ac <.L14>

000014e2 <.L16>:
    14e2:	8e 32       	cpi	r24, 0x2E	; 46
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <.L18>
    14e6:	56 fc       	sbrc	r5, 6
    14e8:	f0 c0       	rjmp	.+480    	; 0x16ca <.L4>
    14ea:	68 94       	set
    14ec:	56 f8       	bld	r5, 6
    14ee:	de cf       	rjmp	.-68     	; 0x14ac <.L14>

000014f0 <.L18>:
    14f0:	8c 36       	cpi	r24, 0x6C	; 108
    14f2:	19 f4       	brne	.+6      	; 0x14fa <.L19>
    14f4:	68 94       	set
    14f6:	57 f8       	bld	r5, 7
    14f8:	d9 cf       	rjmp	.-78     	; 0x14ac <.L14>

000014fa <.L19>:
    14fa:	88 36       	cpi	r24, 0x68	; 104
    14fc:	b9 f2       	breq	.-82     	; 0x14ac <.L14>

000014fe <.L15>:
    14fe:	98 2f       	mov	r25, r24
    1500:	9f 7d       	andi	r25, 0xDF	; 223
    1502:	95 54       	subi	r25, 0x45	; 69
    1504:	93 30       	cpi	r25, 0x03	; 3
    1506:	b8 f0       	brcs	.+46     	; 0x1536 <.L20>
    1508:	83 36       	cpi	r24, 0x63	; 99
    150a:	91 f1       	breq	.+100    	; 0x1570 <.L21>
    150c:	83 37       	cpi	r24, 0x73	; 115
    150e:	b1 f1       	breq	.+108    	; 0x157c <.L22>
    1510:	83 35       	cpi	r24, 0x53	; 83
    1512:	09 f0       	breq	.+2      	; 0x1516 <L0^A+0x2>

00001514 <L0^A>:
    1514:	56 c0       	rjmp	.+172    	; 0x15c2 <.L113>
    1516:	f8 01       	movw	r30, r16
    1518:	c1 90       	ld	r12, Z+
    151a:	d1 90       	ld	r13, Z+
    151c:	8f 01       	movw	r16, r30
    151e:	69 2d       	mov	r22, r9
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	56 fc       	sbrc	r5, 6
    1524:	02 c0       	rjmp	.+4      	; 0x152a <.L28>
    1526:	6f ef       	ldi	r22, 0xFF	; 255
    1528:	7f ef       	ldi	r23, 0xFF	; 255

0000152a <.L28>:
    152a:	c6 01       	movw	r24, r12
    152c:	46 d1       	rcall	.+652    	; 0x17ba <strnlen_P>
    152e:	4c 01       	movw	r8, r24
    1530:	68 94       	set
    1532:	57 f8       	bld	r5, 7
    1534:	0a c0       	rjmp	.+20     	; 0x154a <.L27>

00001536 <.L20>:
    1536:	0c 5f       	subi	r16, 0xFC	; 252
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	2f e3       	ldi	r18, 0x3F	; 63
    153c:	29 83       	std	Y+1, r18	; 0x01

0000153e <.L114>:
    153e:	88 24       	eor	r8, r8
    1540:	83 94       	inc	r8
    1542:	91 2c       	mov	r9, r1
    1544:	65 01       	movw	r12, r10

00001546 <.L25>:
    1546:	e8 94       	clt
    1548:	57 f8       	bld	r5, 7

0000154a <.L27>:
    154a:	53 fc       	sbrc	r5, 3
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <.L30>

0000154e <.L29>:
    154e:	48 14       	cp	r4, r8
    1550:	19 04       	cpc	r1, r9
    1552:	09 f0       	breq	.+2      	; 0x1556 <.L30>

00001554 <L0^A>:
    1554:	08 f5       	brcc	.+66     	; 0x1598 <.L31>

00001556 <.L30>:
    1556:	34 2c       	mov	r3, r4

00001558 <.L32>:
    1558:	81 14       	cp	r8, r1
    155a:	91 04       	cpc	r9, r1
    155c:	19 f5       	brne	.+70     	; 0x15a4 <.L34>

0000155e <.L35>:
    155e:	33 20       	and	r3, r3
    1560:	09 f4       	brne	.+2      	; 0x1564 <L0^A+0x2>

00001562 <L0^A>:
    1562:	6c cf       	rjmp	.-296    	; 0x143c <.L3>
    1564:	b7 01       	movw	r22, r14
    1566:	80 e2       	ldi	r24, 0x20	; 32
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	3d d1       	rcall	.+634    	; 0x17e6 <fputc>
    156c:	3a 94       	dec	r3
    156e:	f7 cf       	rjmp	.-18     	; 0x155e <.L35>

00001570 <.L21>:
    1570:	f8 01       	movw	r30, r16
    1572:	80 81       	ld	r24, Z
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	0e 5f       	subi	r16, 0xFE	; 254
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	e1 cf       	rjmp	.-62     	; 0x153e <.L114>

0000157c <.L22>:
    157c:	f8 01       	movw	r30, r16
    157e:	c1 90       	ld	r12, Z+
    1580:	d1 90       	ld	r13, Z+
    1582:	8f 01       	movw	r16, r30
    1584:	69 2d       	mov	r22, r9
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	56 fc       	sbrc	r5, 6
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <.L26>
    158c:	6f ef       	ldi	r22, 0xFF	; 255
    158e:	7f ef       	ldi	r23, 0xFF	; 255

00001590 <.L26>:
    1590:	c6 01       	movw	r24, r12
    1592:	1e d1       	rcall	.+572    	; 0x17d0 <strnlen>
    1594:	4c 01       	movw	r8, r24
    1596:	d7 cf       	rjmp	.-82     	; 0x1546 <.L25>

00001598 <.L31>:
    1598:	b7 01       	movw	r22, r14
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	23 d1       	rcall	.+582    	; 0x17e6 <fputc>
    15a0:	4a 94       	dec	r4
    15a2:	d5 cf       	rjmp	.-86     	; 0x154e <.L29>

000015a4 <.L34>:
    15a4:	f6 01       	movw	r30, r12
    15a6:	57 fc       	sbrc	r5, 7
    15a8:	85 91       	lpm	r24, Z+
    15aa:	57 fe       	sbrs	r5, 7
    15ac:	81 91       	ld	r24, Z+
    15ae:	6f 01       	movw	r12, r30
    15b0:	b7 01       	movw	r22, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	18 d1       	rcall	.+560    	; 0x17e6 <fputc>
    15b6:	31 10       	cpse	r3, r1
    15b8:	3a 94       	dec	r3
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	8f 1a       	sub	r8, r31
    15be:	91 08       	sbc	r9, r1
    15c0:	cb cf       	rjmp	.-106    	; 0x1558 <.L32>

000015c2 <.L113>:
    15c2:	84 36       	cpi	r24, 0x64	; 100
    15c4:	19 f0       	breq	.+6      	; 0x15cc <.L36>
    15c6:	89 36       	cpi	r24, 0x69	; 105
    15c8:	09 f0       	breq	.+2      	; 0x15cc <.L36>

000015ca <L0^A>:
    15ca:	70 c0       	rjmp	.+224    	; 0x16ac <.L37>

000015cc <.L36>:
    15cc:	f8 01       	movw	r30, r16
    15ce:	57 fe       	sbrs	r5, 7
    15d0:	66 c0       	rjmp	.+204    	; 0x169e <.L38>
    15d2:	61 91       	ld	r22, Z+
    15d4:	71 91       	ld	r23, Z+
    15d6:	81 91       	ld	r24, Z+
    15d8:	91 91       	ld	r25, Z+

000015da <.L115>:
    15da:	8f 01       	movw	r16, r30
    15dc:	25 2d       	mov	r18, r5
    15de:	2f 76       	andi	r18, 0x6F	; 111
    15e0:	d2 2e       	mov	r13, r18
    15e2:	97 ff       	sbrs	r25, 7
    15e4:	09 c0       	rjmp	.+18     	; 0x15f8 <.L40>
    15e6:	90 95       	com	r25
    15e8:	80 95       	com	r24
    15ea:	70 95       	com	r23
    15ec:	61 95       	neg	r22
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	8f 4f       	sbci	r24, 0xFF	; 255
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	68 94       	set
    15f6:	d7 f8       	bld	r13, 7

000015f8 <.L40>:
    15f8:	2a e0       	ldi	r18, 0x0A	; 10
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	a5 01       	movw	r20, r10
    15fe:	23 d1       	rcall	.+582    	; 0x1846 <__ultoa_invert>
    1600:	c8 2e       	mov	r12, r24
    1602:	ca 18       	sub	r12, r10

00001604 <.L41>:
    1604:	8c 2c       	mov	r8, r12
    1606:	5d 2c       	mov	r5, r13
    1608:	d6 fe       	sbrs	r13, 6
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <.L50>
    160c:	e8 94       	clt
    160e:	50 f8       	bld	r5, 0
    1610:	c9 14       	cp	r12, r9
    1612:	40 f4       	brcc	.+16     	; 0x1624 <.L50>
    1614:	d4 fe       	sbrs	r13, 4
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <.L81>
    1618:	d2 fc       	sbrc	r13, 2
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <.L81>
    161c:	fd 2d       	mov	r31, r13
    161e:	fe 7e       	andi	r31, 0xEE	; 238
    1620:	5f 2e       	mov	r5, r31

00001622 <.L81>:
    1622:	89 2c       	mov	r8, r9

00001624 <.L50>:
    1624:	54 fe       	sbrs	r5, 4
    1626:	a0 c0       	rjmp	.+320    	; 0x1768 <.L51>
    1628:	fe 01       	movw	r30, r28
    162a:	ec 0d       	add	r30, r12
    162c:	f1 1d       	adc	r31, r1
    162e:	80 81       	ld	r24, Z
    1630:	80 33       	cpi	r24, 0x30	; 48
    1632:	09 f0       	breq	.+2      	; 0x1636 <L0^A+0x2>

00001634 <L0^A>:
    1634:	92 c0       	rjmp	.+292    	; 0x175a <.L52>
    1636:	25 2d       	mov	r18, r5
    1638:	29 7e       	andi	r18, 0xE9	; 233
    163a:	52 2e       	mov	r5, r18

0000163c <.L53>:
    163c:	85 2d       	mov	r24, r5
    163e:	88 70       	andi	r24, 0x08	; 8
    1640:	38 2e       	mov	r3, r24
    1642:	53 fc       	sbrc	r5, 3
    1644:	9f c0       	rjmp	.+318    	; 0x1784 <.L55>
    1646:	50 fe       	sbrs	r5, 0
    1648:	99 c0       	rjmp	.+306    	; 0x177c <.L56>
    164a:	9c 2c       	mov	r9, r12
    164c:	84 14       	cp	r8, r4
    164e:	18 f4       	brcc	.+6      	; 0x1656 <.L57>
    1650:	4c 0c       	add	r4, r12
    1652:	94 2c       	mov	r9, r4
    1654:	98 18       	sub	r9, r8

00001656 <.L57>:
    1656:	54 fe       	sbrs	r5, 4
    1658:	9b c0       	rjmp	.+310    	; 0x1790 <.L59>
    165a:	b7 01       	movw	r22, r14
    165c:	80 e3       	ldi	r24, 0x30	; 48
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	c2 d0       	rcall	.+388    	; 0x17e6 <fputc>
    1662:	52 fe       	sbrs	r5, 2
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <.L66>
    1666:	88 e7       	ldi	r24, 0x78	; 120
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	51 fe       	sbrs	r5, 1
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <.L62>
    166e:	88 e5       	ldi	r24, 0x58	; 88
    1670:	90 e0       	ldi	r25, 0x00	; 0

00001672 <.L62>:
    1672:	b7 01       	movw	r22, r14

00001674 <.L118>:
    1674:	b8 d0       	rcall	.+368    	; 0x17e6 <fputc>

00001676 <.L66>:
    1676:	c9 14       	cp	r12, r9
    1678:	08 f4       	brcc	.+2      	; 0x167c <L0^A+0x2>

0000167a <L0^A>:
    167a:	96 c0       	rjmp	.+300    	; 0x17a8 <.L67>
    167c:	ca 94       	dec	r12
    167e:	d1 2c       	mov	r13, r1
    1680:	9f ef       	ldi	r25, 0xFF	; 255
    1682:	c9 1a       	sub	r12, r25
    1684:	d9 0a       	sbc	r13, r25
    1686:	ca 0c       	add	r12, r10
    1688:	db 1c       	adc	r13, r11

0000168a <.L68>:
    168a:	f6 01       	movw	r30, r12
    168c:	82 91       	ld	r24, -Z
    168e:	6f 01       	movw	r12, r30
    1690:	b7 01       	movw	r22, r14
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a8 d0       	rcall	.+336    	; 0x17e6 <fputc>
    1696:	ac 14       	cp	r10, r12
    1698:	bd 04       	cpc	r11, r13
    169a:	b9 f7       	brne	.-18     	; 0x168a <.L68>
    169c:	60 cf       	rjmp	.-320    	; 0x155e <.L35>

0000169e <.L38>:
    169e:	61 91       	ld	r22, Z+
    16a0:	71 91       	ld	r23, Z+
    16a2:	07 2e       	mov	r0, r23
    16a4:	00 0c       	add	r0, r0
    16a6:	88 0b       	sbc	r24, r24
    16a8:	99 0b       	sbc	r25, r25
    16aa:	97 cf       	rjmp	.-210    	; 0x15da <.L115>

000016ac <.L37>:
    16ac:	d5 2c       	mov	r13, r5
    16ae:	e8 94       	clt
    16b0:	d4 f8       	bld	r13, 4
    16b2:	2a e0       	ldi	r18, 0x0A	; 10
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	85 37       	cpi	r24, 0x75	; 117
    16b8:	e1 f1       	breq	.+120    	; 0x1732 <.L43>
    16ba:	95 2d       	mov	r25, r5
    16bc:	99 7f       	andi	r25, 0xF9	; 249
    16be:	d9 2e       	mov	r13, r25
    16c0:	8f 36       	cpi	r24, 0x6F	; 111
    16c2:	a9 f1       	breq	.+106    	; 0x172e <.L75>
    16c4:	f0 f4       	brcc	.+60     	; 0x1702 <.L44>
    16c6:	88 35       	cpi	r24, 0x58	; 88
    16c8:	51 f1       	breq	.+84     	; 0x171e <.L45>

000016ca <.L4>:
    16ca:	f7 01       	movw	r30, r14
    16cc:	86 81       	ldd	r24, Z+6	; 0x06
    16ce:	97 81       	ldd	r25, Z+7	; 0x07

000016d0 <.L1>:
    16d0:	2b 96       	adiw	r28, 0x0b	; 11
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	bf 90       	pop	r11
    16ee:	af 90       	pop	r10
    16f0:	9f 90       	pop	r9
    16f2:	8f 90       	pop	r8
    16f4:	7f 90       	pop	r7
    16f6:	6f 90       	pop	r6
    16f8:	5f 90       	pop	r5
    16fa:	4f 90       	pop	r4
    16fc:	3f 90       	pop	r3
    16fe:	2f 90       	pop	r2
    1700:	08 95       	ret

00001702 <.L44>:
    1702:	80 37       	cpi	r24, 0x70	; 112
    1704:	49 f0       	breq	.+18     	; 0x1718 <.L46>
    1706:	88 37       	cpi	r24, 0x78	; 120
    1708:	01 f7       	brne	.-64     	; 0x16ca <.L4>

0000170a <.L47>:
    170a:	d4 fe       	sbrs	r13, 4
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <.L76>
    170e:	68 94       	set
    1710:	d2 f8       	bld	r13, 2

00001712 <.L76>:
    1712:	20 e1       	ldi	r18, 0x10	; 16
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <.L43>

00001718 <.L46>:
    1718:	68 94       	set
    171a:	d4 f8       	bld	r13, 4
    171c:	f6 cf       	rjmp	.-20     	; 0x170a <.L47>

0000171e <.L45>:
    171e:	54 fe       	sbrs	r5, 4
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <.L77>
    1722:	e9 2f       	mov	r30, r25
    1724:	e6 60       	ori	r30, 0x06	; 6
    1726:	de 2e       	mov	r13, r30

00001728 <.L77>:
    1728:	20 e1       	ldi	r18, 0x10	; 16
    172a:	32 e0       	ldi	r19, 0x02	; 2
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <.L43>

0000172e <.L75>:
    172e:	28 e0       	ldi	r18, 0x08	; 8
    1730:	30 e0       	ldi	r19, 0x00	; 0

00001732 <.L43>:
    1732:	f8 01       	movw	r30, r16
    1734:	d7 fe       	sbrs	r13, 7
    1736:	0c c0       	rjmp	.+24     	; 0x1750 <.L48>
    1738:	61 91       	ld	r22, Z+
    173a:	71 91       	ld	r23, Z+
    173c:	81 91       	ld	r24, Z+
    173e:	91 91       	ld	r25, Z+

00001740 <.L116>:
    1740:	8f 01       	movw	r16, r30
    1742:	a5 01       	movw	r20, r10
    1744:	80 d0       	rcall	.+256    	; 0x1846 <__ultoa_invert>
    1746:	c8 2e       	mov	r12, r24
    1748:	ca 18       	sub	r12, r10
    174a:	e8 94       	clt
    174c:	d7 f8       	bld	r13, 7
    174e:	5a cf       	rjmp	.-332    	; 0x1604 <.L41>

00001750 <.L48>:
    1750:	61 91       	ld	r22, Z+
    1752:	71 91       	ld	r23, Z+
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	f3 cf       	rjmp	.-26     	; 0x1740 <.L116>

0000175a <.L52>:
    175a:	52 fc       	sbrc	r5, 2
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <.L54>

0000175e <.L117>:
    175e:	83 94       	inc	r8
    1760:	6d cf       	rjmp	.-294    	; 0x163c <.L53>

00001762 <.L54>:
    1762:	83 94       	inc	r8
    1764:	83 94       	inc	r8
    1766:	6a cf       	rjmp	.-300    	; 0x163c <.L53>

00001768 <.L51>:
    1768:	85 2d       	mov	r24, r5
    176a:	86 78       	andi	r24, 0x86	; 134
    176c:	09 f4       	brne	.+2      	; 0x1770 <L0^A+0x2>

0000176e <L0^A>:
    176e:	66 cf       	rjmp	.-308    	; 0x163c <.L53>
    1770:	f6 cf       	rjmp	.-20     	; 0x175e <.L117>

00001772 <.L58>:
    1772:	b7 01       	movw	r22, r14
    1774:	80 e2       	ldi	r24, 0x20	; 32
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	36 d0       	rcall	.+108    	; 0x17e6 <fputc>
    177a:	83 94       	inc	r8

0000177c <.L56>:
    177c:	84 14       	cp	r8, r4
    177e:	c8 f3       	brcs	.-14     	; 0x1772 <.L58>

00001780 <.L83>:
    1780:	31 2c       	mov	r3, r1
    1782:	69 cf       	rjmp	.-302    	; 0x1656 <.L57>

00001784 <.L55>:
    1784:	34 2c       	mov	r3, r4
    1786:	38 18       	sub	r3, r8
    1788:	84 14       	cp	r8, r4
    178a:	08 f4       	brcc	.+2      	; 0x178e <L0^A+0x2>

0000178c <L0^A>:
    178c:	64 cf       	rjmp	.-312    	; 0x1656 <.L57>
    178e:	f8 cf       	rjmp	.-16     	; 0x1780 <.L83>

00001790 <.L59>:
    1790:	85 2d       	mov	r24, r5
    1792:	86 78       	andi	r24, 0x86	; 134
    1794:	09 f4       	brne	.+2      	; 0x1798 <L0^A+0x2>

00001796 <L0^A>:
    1796:	6f cf       	rjmp	.-290    	; 0x1676 <.L66>
    1798:	8b e2       	ldi	r24, 0x2B	; 43
    179a:	51 fe       	sbrs	r5, 1
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	57 fc       	sbrc	r5, 7
    17a0:	8d e2       	ldi	r24, 0x2D	; 45
    17a2:	b7 01       	movw	r22, r14
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	66 cf       	rjmp	.-308    	; 0x1674 <.L118>

000017a8 <.L67>:
    17a8:	b7 01       	movw	r22, r14
    17aa:	80 e3       	ldi	r24, 0x30	; 48
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	1b d0       	rcall	.+54     	; 0x17e6 <fputc>
    17b0:	9a 94       	dec	r9
    17b2:	61 cf       	rjmp	.-318    	; 0x1676 <.L66>

000017b4 <.L71>:
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	8b cf       	rjmp	.-234    	; 0x16d0 <.L1>

000017ba <strnlen_P>:
    17ba:	fc 01       	movw	r30, r24

000017bc <.L_strnlen_P_loop>:
    17bc:	05 90       	lpm	r0, Z+
    17be:	61 50       	subi	r22, 0x01	; 1
    17c0:	70 40       	sbci	r23, 0x00	; 0
    17c2:	01 10       	cpse	r0, r1
    17c4:	d8 f7       	brcc	.-10     	; 0x17bc <.L_strnlen_P_loop>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	8e 0f       	add	r24, r30
    17cc:	9f 1f       	adc	r25, r31
    17ce:	08 95       	ret

000017d0 <strnlen>:
    17d0:	fc 01       	movw	r30, r24

000017d2 <.L_strnlen_loop>:
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	70 40       	sbci	r23, 0x00	; 0
    17d6:	01 90       	ld	r0, Z+
    17d8:	01 10       	cpse	r0, r1
    17da:	d8 f7       	brcc	.-10     	; 0x17d2 <.L_strnlen_loop>
    17dc:	80 95       	com	r24
    17de:	90 95       	com	r25
    17e0:	8e 0f       	add	r24, r30
    17e2:	9f 1f       	adc	r25, r31
    17e4:	08 95       	ret

000017e6 <fputc>:
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	18 2f       	mov	r17, r24
    17f0:	09 2f       	mov	r16, r25
    17f2:	eb 01       	movw	r28, r22
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 fd       	sbrc	r24, 1
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <.L2>

000017fa <.L6>:
    17fa:	1f ef       	ldi	r17, 0xFF	; 255
    17fc:	0f ef       	ldi	r16, 0xFF	; 255

000017fe <.L3>:
    17fe:	81 2f       	mov	r24, r17
    1800:	90 2f       	mov	r25, r16
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <.L2>:
    180c:	82 ff       	sbrs	r24, 2
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <.L4>
    1810:	2e 81       	ldd	r18, Y+6	; 0x06
    1812:	3f 81       	ldd	r19, Y+7	; 0x07
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	28 17       	cp	r18, r24
    181a:	39 07       	cpc	r19, r25
    181c:	3c f4       	brge	.+14     	; 0x182c <.L7>
    181e:	e8 81       	ld	r30, Y
    1820:	f9 81       	ldd	r31, Y+1	; 0x01
    1822:	cf 01       	movw	r24, r30
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	99 83       	std	Y+1, r25	; 0x01
    1828:	88 83       	st	Y, r24
    182a:	10 83       	st	Z, r17

0000182c <.L7>:
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	9f 83       	std	Y+7, r25	; 0x07
    1834:	8e 83       	std	Y+6, r24	; 0x06
    1836:	e3 cf       	rjmp	.-58     	; 0x17fe <.L3>

00001838 <.L4>:
    1838:	e8 85       	ldd	r30, Y+8	; 0x08
    183a:	f9 85       	ldd	r31, Y+9	; 0x09
    183c:	81 2f       	mov	r24, r17
    183e:	09 95       	icall
    1840:	89 2b       	or	r24, r25
    1842:	a1 f3       	breq	.-24     	; 0x182c <.L7>
    1844:	da cf       	rjmp	.-76     	; 0x17fa <.L6>

00001846 <__ultoa_invert>:
    1846:	fa 01       	movw	r30, r20
    1848:	aa 27       	eor	r26, r26
    184a:	28 30       	cpi	r18, 0x08	; 8
    184c:	51 f1       	breq	.+84     	; 0x18a2 <.L_oct>
    184e:	20 31       	cpi	r18, 0x10	; 16
    1850:	81 f1       	breq	.+96     	; 0x18b2 <.L_hex>
    1852:	e8 94       	clt

00001854 <.L_dec_loop>:
    1854:	6f 93       	push	r22
    1856:	6e 7f       	andi	r22, 0xFE	; 254
    1858:	6e 5f       	subi	r22, 0xFE	; 254
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8f 4f       	sbci	r24, 0xFF	; 255
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	af 4f       	sbci	r26, 0xFF	; 255
    1862:	b1 e0       	ldi	r27, 0x01	; 1
    1864:	3e d0       	rcall	.+124    	; 0x18e2 <.L_div_add>
    1866:	b4 e0       	ldi	r27, 0x04	; 4
    1868:	3c d0       	rcall	.+120    	; 0x18e2 <.L_div_add>
    186a:	67 0f       	add	r22, r23
    186c:	78 1f       	adc	r23, r24
    186e:	89 1f       	adc	r24, r25
    1870:	9a 1f       	adc	r25, r26
    1872:	a1 1d       	adc	r26, r1
    1874:	68 0f       	add	r22, r24
    1876:	79 1f       	adc	r23, r25
    1878:	8a 1f       	adc	r24, r26
    187a:	91 1d       	adc	r25, r1
    187c:	a1 1d       	adc	r26, r1
    187e:	6a 0f       	add	r22, r26
    1880:	71 1d       	adc	r23, r1
    1882:	81 1d       	adc	r24, r1
    1884:	91 1d       	adc	r25, r1
    1886:	a1 1d       	adc	r26, r1
    1888:	20 d0       	rcall	.+64     	; 0x18ca <.L_lsr_4>
    188a:	09 f4       	brne	.+2      	; 0x188e <.L1^B1>
    188c:	68 94       	set

0000188e <.L1^B1>:
    188e:	3f 91       	pop	r19
    1890:	2a e0       	ldi	r18, 0x0A	; 10
    1892:	26 9f       	mul	r18, r22
    1894:	11 24       	eor	r1, r1
    1896:	30 19       	sub	r19, r0
    1898:	30 5d       	subi	r19, 0xD0	; 208
    189a:	31 93       	st	Z+, r19
    189c:	de f6       	brtc	.-74     	; 0x1854 <.L_dec_loop>

0000189e <.L_eos>:
    189e:	cf 01       	movw	r24, r30
    18a0:	08 95       	ret

000018a2 <.L_oct>:
    18a2:	46 2f       	mov	r20, r22
    18a4:	47 70       	andi	r20, 0x07	; 7
    18a6:	40 5d       	subi	r20, 0xD0	; 208
    18a8:	41 93       	st	Z+, r20
    18aa:	b3 e0       	ldi	r27, 0x03	; 3
    18ac:	0f d0       	rcall	.+30     	; 0x18cc <.L_lsr>
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <.L_oct>
    18b0:	f6 cf       	rjmp	.-20     	; 0x189e <.L_eos>

000018b2 <.L_hex>:
    18b2:	46 2f       	mov	r20, r22
    18b4:	4f 70       	andi	r20, 0x0F	; 15
    18b6:	40 5d       	subi	r20, 0xD0	; 208
    18b8:	4a 33       	cpi	r20, 0x3A	; 58
    18ba:	18 f0       	brcs	.+6      	; 0x18c2 <.L3^B1>
    18bc:	49 5d       	subi	r20, 0xD9	; 217
    18be:	31 fd       	sbrc	r19, 1
    18c0:	40 52       	subi	r20, 0x20	; 32

000018c2 <.L3^B1>:
    18c2:	41 93       	st	Z+, r20
    18c4:	02 d0       	rcall	.+4      	; 0x18ca <.L_lsr_4>
    18c6:	a9 f7       	brne	.-22     	; 0x18b2 <.L_hex>
    18c8:	ea cf       	rjmp	.-44     	; 0x189e <.L_eos>

000018ca <.L_lsr_4>:
    18ca:	b4 e0       	ldi	r27, 0x04	; 4

000018cc <.L_lsr>:
    18cc:	a6 95       	lsr	r26
    18ce:	97 95       	ror	r25
    18d0:	87 95       	ror	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	ba 95       	dec	r27
    18d8:	c9 f7       	brne	.-14     	; 0x18cc <.L_lsr>
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 05       	cpc	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	08 95       	ret

000018e2 <.L_div_add>:
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	0a 2e       	mov	r0, r26

000018e8 <.L7^B1>:
    18e8:	06 94       	lsr	r0
    18ea:	57 95       	ror	r21
    18ec:	47 95       	ror	r20
    18ee:	37 95       	ror	r19
    18f0:	27 95       	ror	r18
    18f2:	ba 95       	dec	r27
    18f4:	c9 f7       	brne	.-14     	; 0x18e8 <.L7^B1>
    18f6:	62 0f       	add	r22, r18
    18f8:	73 1f       	adc	r23, r19
    18fa:	84 1f       	adc	r24, r20
    18fc:	95 1f       	adc	r25, r21
    18fe:	a0 1d       	adc	r26, r0
    1900:	08 95       	ret

00001902 <_exit>:
    1902:	f8 94       	cli

00001904 <__stop_program>:
    1904:	ff cf       	rjmp	.-2      	; 0x1904 <__stop_program>

00001906 <L0^A>:
    1906:	0c 03       	fmul	r16, r20
    1908:	40 03       	mulsu	r20, r16
    190a:	4d 03       	fmul	r20, r21
    190c:	57 03       	mulsu	r21, r23
    190e:	82 03       	fmuls	r16, r18
    1910:	ad 03       	fmulsu	r18, r21
    1912:	b9 03       	fmulsu	r19, r17
    1914:	c7 03       	fmuls	r20, r23
    1916:	e5 03       	fmuls	r22, r21
    1918:	1b 04       	cpc	r1, r11
